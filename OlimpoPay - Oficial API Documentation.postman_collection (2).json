{
	"info": {
		"_postman_id": "0d2b44cc-c7d8-4623-a54a-c2227107c611",
		"name": "OlimpoPay - Oficial API Documentation",
		"description": "Welcome to **Skill Digital** API!  \nIn this documentation, you will find all the information to integrate with our API.  \nYou can easily integrate withdrawal and deposit functions in your application, offering your customers a secure and reliable transaction experience.\n\n## Summary\n\n1. This manual aims to establish the Security Headers that must be implemented by default for WEB applications.\n    \n\n### Environment\n\nIn the production environment, calls must be made using the HTTPS protocol.\n\n### About PIX\n\nPIX is an instant payment system created by the Central Bank of Brazil, officially launched in November 2020. It allows bank transfers to be carried out in real time, 24 hours a day, seven days a week, at no cost to individuals, and with low rates for companies.\n\nWith PIX, it is possible to carry out transfers using only information such as CPF, CNPJ, email or cell phone of the recipient, making the process faster and more practical. In addition, PIX also allows payment for purchases in physical and virtual stores, withdrawals from commercial establishments and even payment of utility bills.\n\nThe purpose of the PIX is to reduce the use of cash and increase the efficiency of the Brazilian financial system. It has been adopted by a large part of the population and has already become one of the most popular ways of transferring money in Brazil.\n\n### The methods used for depositing and withdrawing via Pix will be:\n\n[Token](https://doc.skilldigital.com.br/#6c896009-0de1-4c9a-aa11-74b7f3fe15e6) - responsible for generating the token used in all requests.\n\n[Deposit](https://doc.skilldigital.com.br/#68f9c7a9-3cef-4fa8-8eab-1c031b720085) - In case of a deposit, our customers must call the **PaymentPix API.**\n\n[Withdraw](https://doc.skilldigital.com.br/#cdf22b9e-a978-41a8-ab05-d7bb83a38058) - In case of withdrawal, our customers must call the **TransferPix API.**\n\n### About callback functions\n\n[Webhook](https://doc.skilldigital.com.br/#2e4468c1-f84f-48b4-9b30-5ad04fc70d6a) - You can check the callback process of deposit and withdrawal methods.\n\n### Error Table\n\n[Check error table.](https://doc.skilldigital.com.br/#305f96e1-16ad-4608-8d01-f3e23b5aea57)\n\n### FAQ\n\n[FAQ](https://doc.skilldigital.com.br/#78fdc11e-8e99-429e-a894-fdaa4abb4cdb) - We have a FAQ with frequently asked questions.\n\n# Download the collection\n\nYou can download our collection to your local environment by clicking on the \"Run in Postman\" button in the upper right corner of the screen.\n\n<img src=\"https://content.pstmn.io/c1032d83-7e45-4665-9c17-8889ec2c637d/cG9zdG1hbi5wbmc=\" width=\"331\" height=\"127\">\n\nYou can use both Postman Web and Postman Desktop.\n\n# About Authorization\n\nBefore making any request, it is necessary to authenticate through the Token endpoint. [Token[POST -&gt; Token]](https://documenter.getpostman.com/view/26213144/2s93JoxRUa#52f82973-3e52-4871-8660-084754b11485)\n\n# About IP Authorization\n\nTo connect with our API in the production environment, it is necessary to inform your IP so that it is released by our firewall. In a SANDBOX environment, it is not necessary.\n\n# About API values ​​format\n\nThe Skill Digital API receives numerical values ​​in integer format, such as 220, which corresponds to a value of 2.20 in the Brazilian Real.\n\n# About Deposit\n\n**Use of deposit methods**\n\nIn case of a deposit, our customers must call the [PaymentPix API.](https://documenter.getpostman.com/view/26213144/2s93JoxRUa#c24bf481-a191-46b9-a6e6-1206f2019dc7)\n\n**Precondition**\n\n\\- Generation of the access token through the Token folder [(Token[POST -&gt; Token])](https://documenter.getpostman.com/view/26213144/2s93JoxRUa#52f82973-3e52-4871-8660-084754b11485)\n\n**Request:**\n\n\\- After generating the token, access a mass deposit, PaymentPix endpoint:\n\n**Headers:**\n\n**ApplicationToken** – (Obtained from the Customer Panel integration registration screen.)\n\n**Authorization** - (Bearer + access_token)\n\n**X-Request-Id -**\n\nOptional parameter where the customer can enter a hash code at the time of deposit.\n\nThe value informed in the x-request-id parameter will be encrypted using the applicationtoken as key.  \nThe method used for encryption is the HMAC-SHA256 passing two parameters, the first being the value of the x-request-id, and the second the value that comes in the Applicationtoken parameter.\n\nYou can use the site [https://www.devglan.com/online-tools/hmac-sha256-online](https://www.devglan.com/online-tools/hmac-sha256-online) to encrypt your token.\n\nThis parameter will be used in callback control on successful operations.\n\nThe x-request-id parameter will be sent in the header of the callback function.\n\nThis field supports values ​​of up to 68 characters.\n\nBody:\n\n{\n\n```\n\"CustomId\": \"\",\n\"amount\": 100,\n\"dueDate\": \"30/12/2023\",\n\"customer\": {\n    \"name\": \"SANDBOX PEOPLE NAME\",\n    \"email\": \"sandbox.people@email.sandbox.com\",\n    \"cpfcnpj\": \"87397163769\",\n    \"address\": \"STREET 01, NUMBER 02 - HOUSE 03\",\n    \"neighborhood\": \"NEIGHBORHOOD\",\n    \"city\": \"CITY\",\n    \"state\": \"UF\",\n    \"country\": \"BRAZIL\",\n    \"zipcode\": \"12345678\"\n},\n\"confirmationUrl\": \"https://webhook.site/495472fc-207d-45ae-8c5d-731ec32779d4\"\n\n ```\n\n}\n\n**Optional information**\n\n**In case of success, confirmation of a deposit is carried out by confirmationUrl. In the event of a reversal, it will be carried out exclusively through the updateUrl.**\n\nAfter making the request, our system will return to the Status Code 200 customer with the payment QRCode.  \nAt this time, our system will be waiting for the payment. In case of identified payment, we carry out the processing, confirm and send Callback to the customer.\n\nAfter sending the Callback to the client, we expect the client to return with the code 200 in case of Success. It is not necessary to have content in the body, as we only validate the Status Code.\n\nIf it returns Status Code 400, our system understands that it is critical for the customer's system and in this case our system will consider it as sent.\n\nFor any code different from 200 and 400, our system will try to send the shipment 20 times, if not successful, our system will finish the shipment.\n\nIn case of non-payment of the QRCode, we do not have Callback communication.\n\n### Deposit status:\n\n- Pending\n    \n- Canceled\n    \n- Paid\n    \n- Overdue\n    \n\n# About Withdraw\n\n**Use of the Withdrawal method**\n\nIn case of withdrawal, our customers must call the [TransferPix API.](https://documenter.getpostman.com/view/26213144/2s93JoxRUa#5480251f-82ba-4d85-8705-5311712223e0)\n\n**Precondition**\n\n\\- Generation of the access token through the Token folder [(Token[POST -&gt; Token])](https://documenter.getpostman.com/view/26213144/2s93JoxRUa#52f82973-3e52-4871-8660-084754b11485)\n\n**Requisição**\n\n\\- After generating the token, access the Withdraw endpoint TransferPix folder:\n\n**Headers**:\n\n**ApplicationToken** – (Obtained from the Customer Panel integration registration screen.)\n\n**Authorization** - (Bearer + access_token)\n\n**x-request-id (**\n\nOptional parameter where the customer can enter a hash code at the time of withdrawal.\n\nThe value informed in the x-request-id parameter will be encrypted using the applicationtoken as key.  \nThe method used for encryption is the  \nHMAC-SHA256 passing two parameters, the first being the value of the x-resquest-id, and the second being the value of the Applicationtoken parameter.\n\nYou can use the site [https://www.devglan.com/online-tools/hmac-sha256-online](https://www.devglan.com/online-tools/hmac-sha256-online) to encrypt your token.\n\nThis parameter will be used in callback control on successful operations.\n\nThe x-request-id parameter will be sent in the header of the callback function.\n\nThis field supports values ​​of up to 68 characters.\n\n**)**\n\nBody:\n\n{\n\n```\n\"digitalSignature\": \"\",\n\"amount\": 1,\n\"favorecido\": {\n    \"nome\": \"SANDBOX PEOPLE NAME\",\n    \"cpfcnpj\": \"87397163769\",\n    \"chave\": {\n        \"idTipoChavePIX\": 1,\n        \"chavePIX\": \"87397163769\"\n    }\n},\n\"confirmationUrl\": \"https://webhook.site/495472fc-207d-45ae-8c5d-731ec32779d4\",\n\"updateUrl\": \"https://webhook.site/495472fc-207d-45ae-8c5d-731ec32779d4\"\n\n ```\n\n}\n\n**Optional information**\n\n**In case of success, confirmation of a deposit is carried out by confirmationUrl. In the event of a reversal, it will be carried out exclusively through the updateUrl.**\n\n**Successful payment**\n\nAfter we receive the withdrawal request and process it asynchronously and wait for the bank to return, if the bank confirms it, we send a Callback confirming the withdrawal. The expected code for them is 200 can be content.\n\nIf it returns Status code 400, our system understands that it is critical to the client's system and in this case our system considers it as sent.\n\nFor anything other than 200 and 400, our system will try to send the submission 20 times, if unsuccessful, our system will terminate the submission attempt.\n\n### Payment instability\n\nWe received the withdrawal request and processed it asynchronously and waited for the bank to return. If the bank returns that it was unable to pay, for example (Destination institution rejected payment, origin institution rejected payment, unstable central bank or other reasons) we return the instability codes:\n\n**Withdraw:**\n\n01 - INSTABILITY\n\n02 - RETURNED TRANSACTION\n\n03 - REJECTED TRANSACTION",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5720081",
		"_collection_link": "https://bancodi.postman.co/workspace/20654d68-78b4-441e-a998-e007d7a0ef7f/collection/5720081-0d2b44cc-c7d8-4623-a54a-c2227107c611?action=share&source=collection_link&creator=5720081"
	},
	"item": [
		{
			"name": "Customer",
			"item": [
				{
					"name": "CreateCustomer - PF",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var Atual = new Date()\r",
									"var customId = Number(Atual)\r",
									"pm.collectionVariables.set('CustomId', customId)\r",
									"\r",
									"//Checa se as variaveis obrigatorias estao preenchidas\r",
									"if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
									"    throw new Error('Usuario ou senha em branco')\r",
									"}\r",
									"if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
									"    throw new Error('ApplicationToken em branco')\r",
									"}\r",
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
									"    method: 'POST',\r",
									"    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        \"urlencoded\": [\r",
									"            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
									"            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
									"            { key: \"grant_type\", value: \"password\" }\r",
									"        ]\r",
									"    }\r",
									"    }, (err, res) => {\r",
									"        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
									"    })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ApplicationToken",
								"value": "{{APLICATIONTOKEN}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{AccessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"sendNotificationsToOwner\": false,\r\n  \"typePerson\": 1,\r\n  \"legalPerson\": null,\r\n  \"naturalPerson\": {\r\n    \"documentNumber\": \"64509618727\",\r\n    \"name\": \"Anderson Caleb Breno Pinto\",\r\n    \"gender\": 2,\r\n    \"birthDate\": \"2001-08-20\"\r\n  },\r\n  \"address\": {\r\n    \"zipCode\": \"24230060\",\r\n    \"addressNumber\": \"220\"\r\n  },\r\n  \"contact\": {\r\n    \"email\": \"anderson.caleb.pinto@likaleal.com.br\",\r\n    \"phoneNumber\": \"21995535996\",\r\n    \"cellPhone\": \"21995535996\",\r\n    \"commercialPhone\": null\r\n  },\r\n  \"userAdmin\": {\r\n    \"name\": \"Anderson Caleb Breno Pinto\",\r\n    \"email\": \"anderson.caleb.pinto@likaleal.com.br\",\r\n    \"username\": \"apinto\",\r\n    \"password\": \"HikSzNULrR\"\r\n  },\r\n  \"defaultWebhook\": \"https://webhook.site/543dc354-639e-46cd-bb16-4d9c678810e0\",\r\n  \"createAPICredentials\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASEURL}}/Customer/CreateCustomer",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"Customer",
								"CreateCustomer"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateCustomer - PJ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var Atual = new Date()\r",
									"var customId = Number(Atual)\r",
									"pm.collectionVariables.set('CustomId', customId)\r",
									"\r",
									"//Checa se as variaveis obrigatorias estao preenchidas\r",
									"if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
									"    throw new Error('Usuario ou senha em branco')\r",
									"}\r",
									"if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
									"    throw new Error('ApplicationToken em branco')\r",
									"}\r",
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
									"    method: 'POST',\r",
									"    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        \"urlencoded\": [\r",
									"            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
									"            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
									"            { key: \"grant_type\", value: \"password\" }\r",
									"        ]\r",
									"    }\r",
									"    }, (err, res) => {\r",
									"        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
									"    })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ApplicationToken",
								"value": "{{APLICATIONTOKEN}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{AccessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"sendNotificationsToOwner\": false,\r\n    \"typePerson\": \"2\",\r\n    \"legalPerson\": {\r\n        \"documentNumber\": \"14633018000135\",\r\n        \"name\": \"BUSINESS CENTER\",\r\n        \"companyName\": \"BUSINESS CENTER BRASIL LTDA\",\r\n        \"cnaeCode\": \"7020400\",\r\n        \"openDate\": \"2011-11-03\",\r\n        \"simpleNational\": false,\r\n        \"partners\": [\r\n            {\r\n                \"typePerson\": 1,\r\n                \"isLegalRepresentative\": true,\r\n                \"participation\": 100,\r\n                \"legalPerson\": \"\",\r\n                \"naturalPerson\": {\r\n                    \"documentNumber\": \"13359573838\",\r\n                    \"name\": \"Milton Carvalho lopez\",\r\n                    \"gender\": 2,\r\n                    \"birthDate\": \"1970-08-22\",\r\n                    \"idMaritalStatus\": 0\r\n                },\r\n                \"address\": {\r\n                    \"zipCode\": \"11010090\",\r\n                    \"addressNumber\": \"104\",\r\n                    \"address2\": \"Rua Frei Gaspar\",\r\n                    \"address\": \"Rua Frei Gaspar\",\r\n                    \"state\": \"SP\",\r\n                    \"city\": \"Santos\",\r\n                    \"neighborhood\": \"Centro\"\r\n                },\r\n                \"contact\": {\r\n                    \"email\": \"jiy701382@gmail.com\",\r\n                    \"phoneNumber\": \"+5511977655555\",\r\n                    \"cellPhone\": \"+5511977655555\",\r\n                    \"commercialPhone\": \"\"\r\n                }\r\n            }\r\n        ]\r\n    },\r\n    \"address\": {\r\n        \"zipCode\": \"11010090\",\r\n        \"addressNumber\": \"104\",\r\n        \"address2\": \"Rua Frei Gaspar\",\r\n        \"address\": \"Rua Frei Gaspar\",\r\n        \"state\": \"SP\",\r\n        \"city\": \"Santos\",\r\n        \"neighborhood\": \"Centro\"\r\n    },\r\n    \"contact\": {\r\n        \"email\": \"jiy701382@gmail.com\",\r\n        \"phoneNumber\": \"+5511977655555\",\r\n        \"cellPhone\": \"+5511977655555\",\r\n        \"commercialPhone\": \"\"\r\n    },\r\n    \"userAdmin\": {\r\n        \"name\": \"BUSINESS CENTER BRASIL LTDA\",\r\n        \"email\": \"jiy701382@gmail.com\",\r\n        \"username\": \"BUSINESS CENTER BRASIL LTDA\",\r\n        \"password\": \"123456\"\r\n    },\r\n    \"defaultWebhook\": \"\",\r\n    \"createAPICredentials\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASEURL}}/Customer/CreateCustomer",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"Customer",
								"CreateCustomer"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Error table",
			"item": [],
			"description": "| Code | Parameter | PT_BR error | EN_US Error |\n| --- | --- | --- | --- |\n| 001 | Any | Parâmetros da requisição vazios | Empty request parameters |\n| 002 | token | Não pode ser vazio | Can't be empty |\n| 003 | applicationToken | Não pode ser vazio | Can't be empty |\n| 004 | applicationToken | Acesso não autorizado ao “ApplicationToken” | Unauthorized access to “ApplicationToken” |\n| 005 | token | Acesso não autorizado ao “token” | Unauthorized access to the “token” |\n| 006 | passInterestToCustomer | Repassar juros ao cliente não definido | Pass interest to undefined customer |\n| 007 | passRateToCustomer | Repassar multa ao cliente não definido | Pass fine to undefined customer |\n| 008 | passFeeToCustomer | Repassar taxas ao cliente não definido | Pass fees to undefined customer |\n| 09 | customer | Customer vazio | Empty customer |\n| 010 | customer.cpfCnpj | CPF ou CNPJ vazio, ou número informado é inválido | CPF or CNPJ empty, or the number informed is invalid |\n| 011 | customer.email | Email vazio | Empty email |\n| 012 | maximumPaymentDate | Data inválida | Invalid date |\n| 013 | cardNumber | Não pode ser vazio (Em caso de transação por cartão de crédito) | Cannot be empty (In case of credit card transaction) |\n| 014 | securityCode | Não pode ser vazio (Em caso de transação por cartão de crédito) | Cannot be empty (In case of credit card transaction) |\n| 015 | securityCode | Valor informado inválido (Em caso de transação por cartão de crédito) | Invalid value entered (In case of credit card transaction) |\n| 016 | cardNumber | Valor informado inválido (Em caso de transação por cartão de crédito) | Invalid value entered (In case of credit card transaction) |\n| 017 | expirationMonth | Não pode ser vazio (Em caso de transação por cartão de crédito) | Cannot be empty (In case of credit card transaction) |\n| 018 | expirationYear | Não pode ser vazio (Em caso de transação por cartão de crédito) | Cannot be empty (In case of credit card transaction) |\n| 019 | installments | Mínimo 1 e máximo 12 (Em caso de transação por cartão de crédito) | Minimum 1 and maximum 12 (In case of credit card transaction) |\n| 020 | amount / items | Parcela mínima R$ 5,00 (Em caso de transação por cartão de crédito) | Minimum installment R$ 5.00 (In case of credit card transaction) |\n| 021 | customer.name | Name vazio | empty name |\n| 022 | amount | “Amount” deve ser informado ou ser enviados itens no parâmetro “Items” | “Amount” must be informed or items must be sent in the “Items” parameter |\n| 023 | recurrence | Não se aplica para esta solicitação (Em caso de recorrência) | Not applicable for this request (In case of recurrence) |\n| 024 | freeTrialPeriod | Não se aplica para esta solicitação (Em caso de recorrência) | Not applicable for this request (In case of recurrence) |\n| 025 | installments | Parcelas não são permitidas na recorrência (Em caso de recorrência) | Installments are not allowed on recurrence (In case of recurrence) |\n| 026 | recurrenceType | Não definida (Em caso de recorrência) | Not defined (In case of recurrence) |\n| 027 | dateEndingRecurrence | Não definida (Em caso de recorrência) | Not defined (In case of recurrence) |\n| 028 | passInterestToCustomer | Não definido (Em caso de recorrência) | Not defined (In case of recurrence) |\n| 029 | passRateToCustomer | Não definido (Em caso de recorrência) | Not defined (In case of recurrence) |\n| 030 | passFeeToCustomer | Não definido (Em caso de recorrência) | Not defined (In case of recurrence) |\n| 031 | freeTrialPeriodo | Valor informado não corresponde ao período (Em caso de recorrência) | Entered value does not correspond to the period (In case of recurrence) |\n| 032 | promotionalPeriod | Valor informado não corresponde ao período (Em caso de recorrência) | Entered value does not correspond to the period (In case of recurrence) |\n| 033 | receiver.name | Deve ser informado (Em caso de split) | Must be informed (In case of split) |\n| 034 | receiver.bankNumber | Deve ser informado (Em caso de split) | Must be informed (In case of split) |\n| 035 | receiver.bankNumer | Valor informado inválido (Em caso de split) | Invalid informed value (In case of split) |\n| 036 | receiver.bankBranch | Deve ser informado (Em caso de split) | Must be informed (In case of split) |\n| 037 | receiver.bankAccountType | Deve ser informado (Em caso de split) | must be informed (In case of split) |\n| 038 | receiver.bankAccountType | Valor informado inválido (Em caso de split) | Invalid informed value (In case of split |\n| 039 | receiver.checkingAccount | Deve ser informado (Em caso de split) | Must be informed (In case of split) |\n| 040 | receiver.comissionValue | Deve ser informado (Em caso de split) | Must be informed (In case of split) |\n| 041 | receiver.commissionType | Deve ser informado (Em caso de split) | Must be informed (In case of split) |\n| 042 | receiver.commissionType | Valor informado inválido (Em caso de split) | Invalid informed value (In case of split) |\n| 043 | duedate | Data vencimento não informada | Due date not informed |\n| 044 | duedate | Data vencimento inválida | Invalid expiration date |\n| 045 | duedate | Data vencimento maior que “maximumPaymentDate” | Due date greater than “maximumPaymentDate” |\n| 046 | customID | Deve ser informado | must be informed |\n| 047 | amount | Deve ser informado | must be informed |\n| 048 | \\- | Conta bloqueada ou cancelada | Account blocked or canceled |\n| 049 | \\- | Conta com documentação não aprovada (Para recebimento em Criptomoeda não há necessidade de validação prévia) | Account with unapproved documentation (For receipt in Cryptocurrency there is no need for prior validation) |\n| 050 | \\- | Condições comerciais ainda não configuradas para a forma de pagamento | Commercial conditions not yet configured for the payment method |\n| 051 | \\- | Cartão crédito vencido | expired credit card |\n| 052 | \\- | Chaves de autenticação não autorizada pela equipe comercial | Authentication keys not authorized by the commercial team |\n| 053 | id | Id da cobrança não informado ou inválido (O mesmo retornado na criação da cobrança) | Charge id not informed or invalid (The same as returned when creating the charge) |\n| 054 | tid | TID da transação não informado ou inválido (O mesmo retornado na autorização do cartão) | Transaction TID not informed or invalid (The same as returned in the card authorization) |\n| 055 | \\- | Transação já capturada | Transaction already captured |\n| 056 | \\- | Erro ao gravar token de cartão de crédito | Error writing credit card token |\n| 057 | \\- | Erro ao gerar token na bandeira do cartão de crédito | Error generating token in credit card flag |\n| 058 | typePerson | Tipo de pessoa inválido (1 = Pessoa Física e 2 = Pessoa Jurídica) | Invalid type of person (1 = Individual and 2 = Legal Entity) |\n| 059 | documentType | Tipo de documento inválido (1 = CPF e 2 = CNPJ) | Invalid document type (1 = CPF and 2 = CNPJ) |\n| 060 | \\- | Se TypePerson for igual a 1 (Pessoa Física) o DocumentType também precisa ser 1 (CPF) | If TypePerson is equal to 1 (Individual) the DocumentType must also be 1 (CPF) |\n| 061 | \\- | Se TypePerson for igual a 2 (Pessoa Jurídica) o DocumentType também precisa ser 2 (CNPJ) | If TypePerson is equal to 2 (Legal Entity) the DocumentType must also be 2 (CNPJ) |\n| 062 | documentNumber | CPF ou CNPJ vazio, ou número informado é inválido | CPF or CNPJ empty, or the number informed is invalid |\n| 063 | email | E-mail não pode estar vazio | Email cannot be empty |\n| 064 | name | Name não pode estar vazio (Informe o nome fantasia em caso de PJ) | Name cannot be empty (Insert the fantasy name in case of PJ) |\n| 065 | address | Address não pode estar vazio | Address cannot be empty |\n| 066 | zipCode | ZipCode não pode estar vazio | ZipCode cannot be empty |\n| 067 | cellPhone | CellPhone não pode estar vazio | CellPhone cannot be empty |\n| 068 | birthDate | BirthDate não pode estar vazio para cadastro pessoa física | BirthDate cannot be empty for individual registration |\n| 069 | \\- | Se TypePerson = 1 (Pessoa Física) DocumentNumber deve conter o CPF com 11 dígitos | If TypePerson = 1 (Individual) DocumentNumber must contain the CPF with 11 digits |\n| 070 | \\- | Se TypePerson = 2 (Pessoa Jurídica) DocumentNumber deve conter o CNPJ com 14 dígitos | If TypePerson = 2 (Legal Entity) DocumentNumber must contain the CNPJ with 14 digits |\n| 071 | documentNumber | Documento já cadastrado na base de dados | Document already registered in the database |\n| 072 | email | E-mail já cadastrado na base de dados | Email already registered in the database |\n| 073 | email | E-mail já cadastrado como um login de acesso de outro usuário | Email already registered as a login for another user |\n| 074 | name | Nome inválido | Invalid name |\n| 075 | name | Informe o nome completo do cliente | Enter the customer's full name |\n| 076 | state | State não pode estar vazio | State cannot be empty |\n| 077 | state | State inválido ou não contém uma sigla válida | Invalid state or does not contain a valid acronym |\n| 078 | city | City não pode estar vazio | City cannot be empty |\n| 079 | city | City inválido para o State(UF) informado | Invalid City for the State(UF) informed |\n| 080 | companyName | CompanyName não pode estar vazio para cadastro pessoa jurídica | CompanyName cannot be empty for legal entity registration |\n| 081 | gender | 1 = Sexo feminino e 2 = sexo masculino | 1 = female and 2 = male |\n| 082 | birthDate | Idade precisa ser maior que 18 anos para pessoa física | Age must be over 18 for individuals |\n| 083 | zipCode | Zipcode inválido | Invalid zipcode |\n| 084 | \\- | Cobrança não pode ser cancelada pois está paga | Billing cannot be canceled as it has been paid |\n| 084 | \\- | Cobrança já foi cancelada em DD/MM/AAAA | Billing has already been canceled in DD/MM/YYYY |\n| 085 | \\- | Não é possível enviar confirmação de pagamento em ambiente de produção se a cobrança ainda não está paga | It is not possible to send payment confirmation in production environment if the charge is not yet paid |\n| 086 | confirmationUrl | URL de confirmação de cobrança vazia ou inválida | Empty or invalid billing confirmation URL |\n| 087 | transfers | O parâmetro Transfer não podem estar vazios | The Transfer parameter cannot be empty |\n| 088 | transfers | O parâmetro Transfer deve conter o Nickname ou DocumentNumber preenchido | The Transfer parameter must contain the Nickname or DocumentNumber filled in |\n| 089 | digitalSignature | Assinatura digital deve ser informada | Digital signature must be informed |\n| 090 | digitalSignature | Assinatura digital inválida | Invalid digital signature |\n| 091 | \\- | Nenhum token de criptografia foi gerado pelo cliente no painel | No encryption token was generated by the customer in the dashboard |\n| 092 | \\- | Saldo insuficiente para transferência | Insufficient balance for transfer |\n| 093 | \\- | Cliente destino não encontrado | Destination client not found |\n| 094 | \\- | Erro ao cadastrar transferência | Error registering transfer |\n| 095 | \\- | Informe apenas um dos parâmetros. Ou o CPFCNPJ ou Nickname | Enter only one of the parameters. CPFCNPJ or Nickname |\n| 096 | \\- | Conta ainda não aprovada na Digital MB Investimento | Account not yet approved |\n| 097 | \\- | Conta bloqueada na Digital MB Investimento | Account blocked |\n| 098 | \\- | Um ou mais pagamentos estão abaixo do valor mínimo de transferência que é de {0} | One or more payments are below the minimum transfer amount which is {0} |\n| 099 | \\- | Um ou mais pagamentos estão sem endereço informado | One or more payments are without an address provided |\n| 100 | addressTo | Endereço Bitcoin inválido | Invalid Bitcoin address |\n| 101 | installments | Informe ao menos 2 parcelas do carnê | Inform at least 2 installments of the booklet |\n| 102 | \\- | Informe as datas de vencimento de todas as parcelas do carnê | Inform the due dates of all installments of the booklet |\n| 103 | \\- | As datas de vencimento das parcelas do carnê precisam ser maior que a data atual | The due dates installments must be greater than the current date |\n| 104 | installmentNumber | Não pode haver número repetido nas parcelas | Repeated number in the plots |\n| 105 | customId | Não pode haver CustomId repetido nas parcelas | Repeated number in the plots |\n| 106 | dueDate | DueDate não pode ser menor ou igual a data atual | DueDate cannot be less than or equal to the current date |\n| 107 | bankslip | Boleto não encontrado | ticket not found |\n| 108 | bankslip.dueDate | Boleto vencido expirou o prazo de atualização. | Expired ticket expired. |\n| 109 | bankslip.dueDate | Não é possível alterar um boleto mais de uma vez na mesma data. | It is not possible to change a ticket more than once on the same date. |\n| 110 | bankslip | Não foi possível alterar o boleto no sistema do BACEN. | It was not possible to change the ticket in the BACEN system. |\n| 111 | pix | Não foi possível encontrar a chave PIX. | Could not find PIX key. |\n| 112 | pix | Transferência não enviada. Entre em contato com nosso suporte e informe a mensagem: {MENSAGEM PERSONALIZADA} | Transfer not sent. Contact our support and let us know the message: {CUSTOM MESSAGE} |\n| 113 | pix | Ocorreu um erro ao salvar solicitação. Informe imediatamente ao suporte. | An error occurred while saving request. Notify support immediately. |\n| 114 | pix | Não é possível enviar PIX por sua conta. Entre em contato com o setor de compliance para entender o motivo. | It is not possible to send PIX on your own. Contact the compliance department to understand why. |\n| 115 | pix | Cliente ainda não possui conta aberta no banco. | Customer does not have an open bank account yet. |\n| 116 | pix | A conta principal está inativa ou encerrada. | The main account is inactive or closed. |\n| 117 | pix | Informe o nome completo do favorecido | Enter the beneficiary's full name |\n| 118 | pix | Informe o CPF ou CNPJ do favorecido | Inform the beneficiary's CPF or CNPJ |\n| 119 | pix | Informe o tipo de chave PIX do favorecido | Inform the beneficiary's PIX key type |\n| 120 | pix | Informe a chave PIX do favorecido | Inform the beneficiary's PIX key |\n| 121 | pix | Ocorreu um erro ao salvar o conta bancária do favorecido | There was an error saving the payee's bank account |\n| 122 | pix | Ocorreu um erro ao salvar o favorecido | There was an error saving the payee |\n| 123 | pix | URL de confirmação de saque vazia ou inválida | Empty or invalid withdrawal confirmation URL |\n| 124 | pix | URL de atualização de saque vazia ou inválida | Empty or invalid Cashout Update URL |\n| 125 | pix | Não é possível enviar confirmação de conclusão de saque em ambiente de produção se o saque ainda não está confirmado pelo BACEN | It is not possible to send confirmation of withdrawal completion in a production environment if the withdrawal has not yet been confirmed by BACEN |\n| 126 | pix | Cliente ainda não possui conta aberta no banco | Customer does not have an open bank account yet |\n| 127 | pix | Cliente não possui chave cadastrada na sua conta principal | Customer does not have a key registered in his main account |\n| 128 | pix | Conta principal inativa ou encerrada | Master account inactive or closed |\n| 129 | pix | Conta não reconhecida como uma conta do favorecido | Account not recognized as a payee account |\n| 130 | pix | Chave PIX inválida | Invalid PIX key |\n| 131 | pix | Chave PIX de outro titular | Other holder's PIX key |\n| 132 | pix | Erro ao processar o pagamento do PIX no BACEN | Error processing PIX payment at BACEN |\n| 133 | transfer | Não possui permissão para acessar esta transferência | You don't have permission to access this transfer |\n| 134 | pix | Chave PIX inválida no BACEN. Verifique uma nova chave PIX com o destinatário | Invalid PIX key at BACEN. Verify a new PIX key with the recipient |\n| 135 | transfer | Chave PIX não corresponde ao padrão informado ({TIPO_ENVIADO_NA_REQUISICAO}). Tipos permitidos CPF, CNPJ, EMAIL, EVP ou CELULAR. | PIX key does not match the informed pattern ({TYPE_SENT_IN_REQUEST}). Allowed types CPF, CNPJ, EMAIL, EVP, or CELLULAR. |\n| 136 | transfer | O favorecido não foi informado | Beneficiary was not informed |\n| 137 | transfer | Chave PIX do favorecido não informado | Uninformed payee's PIX key |\n| 138 | transfer | Nenhum banco disponível para pagamento. Entre em contato imediatamente com o suporte. | No bank is available for payment. Please contact support immediately. |"
		},
		{
			"name": "Financial",
			"item": [
				{
					"name": "GetRealBalance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var Atual = new Date()\r",
									"var customId = Number(Atual)\r",
									"pm.collectionVariables.set('CustomId', customId)\r",
									"\r",
									"//Checa se as variaveis obrigatorias estao preenchidas\r",
									"if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
									"    throw new Error('Usuario ou senha em branco')\r",
									"}\r",
									"if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
									"    throw new Error('ApplicationToken em branco')\r",
									"}\r",
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
									"    method: 'POST',\r",
									"    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        \"urlencoded\": [\r",
									"            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
									"            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
									"            { key: \"grant_type\", value: \"password\" }\r",
									"        ]\r",
									"    }\r",
									"    }, (err, res) => {\r",
									"        var signBytes = CryptoJS.HmacSHA256(res.json().access_token, pm.collectionVariables.get('CRP-TOKEN'));\r",
									"        var signHex = CryptoJS.enc.Hex.stringify(signBytes);\r",
									"        pm.collectionVariables.set('AssinaturaDigital', signHex);\r",
									"        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
									"    })"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "ApplicationToken",
								"value": "{{APLICATIONTOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"digitalSignature\": \"{{AssinaturaDigital}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASEURL}}/Financial/GetRealBalance",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"Financial",
								"GetRealBalance"
							]
						},
						"description": "For the client to request this EndPoint, just follow the following rules:  \n1 - authenticate in the API the same way you authenticate to call any other method  \n2 - send the parameter in the Header: ApplicationToken  \n3 - send in the body of the request in the \"application/json\" format  \n4 - the body contains only 1 parameter called: \"digitalSignature\" it must contain the same digital signature sent in the Tranfer/Pix method, respecting the encryption rules described in our documents.\n\nResponse:\n\n{  \n\"saldoDisponivel\": 88137574,  \n\"saldoAReceber\": 0,  \n\"codigo\": \"BRL\",  \n\"moeda\": \"Real\",  \n\"simbolo\": \"R$\",  \n\"error\": false,  \n\"returnCode\": \"00\",  \n\"returnMessage\": \"Success\"  \n}"
					},
					"response": []
				},
				{
					"name": "GetBitcoinBalance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var Atual = new Date()\r",
									"var customId = Number(Atual)\r",
									"pm.collectionVariables.set('CustomId', customId)\r",
									"\r",
									"//Checa se as variaveis obrigatorias estao preenchidas\r",
									"if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
									"    throw new Error('Usuario ou senha em branco')\r",
									"}\r",
									"if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
									"    throw new Error('ApplicationToken em branco')\r",
									"}\r",
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
									"    method: 'POST',\r",
									"    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        \"urlencoded\": [\r",
									"            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
									"            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
									"            { key: \"grant_type\", value: \"password\" }\r",
									"        ]\r",
									"    }\r",
									"    }, (err, res) => {\r",
									"        var signBytes = CryptoJS.HmacSHA256(res.json().access_token, pm.collectionVariables.get('CRP-TOKEN'));\r",
									"        var signHex = CryptoJS.enc.Hex.stringify(signBytes);\r",
									"        pm.collectionVariables.set('AssinaturaDigital', signHex);\r",
									"        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
									"    })"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "ApplicationToken",
								"value": "{{APLICATIONTOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"digitalSignature\": \"{{AssinaturaDigital}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASEURL}}/Financial/GetBitcoinBalance?ApplicationToken&Authorization",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"Financial",
								"GetBitcoinBalance"
							],
							"query": [
								{
									"key": "ApplicationToken",
									"value": null
								},
								{
									"key": "Authorization",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "InternalTransfer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var Atual = new Date()\r",
									"var customId = Number(Atual)\r",
									"pm.collectionVariables.set('CustomId', customId)\r",
									"\r",
									"//Checa se as variaveis obrigatorias estao preenchidas\r",
									"if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
									"    throw new Error('Usuario ou senha em branco')\r",
									"}\r",
									"if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
									"    throw new Error('ApplicationToken em branco')\r",
									"}\r",
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
									"    method: 'POST',\r",
									"    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        \"urlencoded\": [\r",
									"            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
									"            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
									"            { key: \"grant_type\", value: \"password\" }\r",
									"        ]\r",
									"    }\r",
									"    }, (err, res) => {\r",
									"        var signBytes = CryptoJS.HmacSHA256(res.json().access_token, pm.collectionVariables.get('CRP-TOKEN'));\r",
									"        var signHex = CryptoJS.enc.Hex.stringify(signBytes);\r",
									"        pm.collectionVariables.set('AssinaturaDigital', signHex);\r",
									"        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
									"    })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ApplicationToken",
								"value": "{{APLICATIONTOKEN}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{AccessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"transfer\": {\r\n    \"nickname\": \"ysilvadr\",\r\n    \"documentNumber\": \"string\",\r\n    \"amount\": 1\r\n  },\r\n  \"digitalSignature\": \"{{AssinaturaDigital}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASEURL}}/transfer/realbalance",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"transfer",
								"realbalance"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Invoice",
			"item": [
				{
					"name": "CancelInvoice",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var Atual = new Date()\r",
									"var customId = Number(Atual)\r",
									"pm.collectionVariables.set('CustomId', customId)\r",
									"\r",
									"//Checa se as variaveis obrigatorias estao preenchidas\r",
									"if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
									"    throw new Error('Usuario ou senha em branco')\r",
									"}\r",
									"if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
									"    throw new Error('ApplicationToken em branco')\r",
									"}\r",
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
									"    method: 'POST',\r",
									"    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        \"urlencoded\": [\r",
									"            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
									"            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
									"            { key: \"grant_type\", value: \"password\" }\r",
									"        ]\r",
									"    }\r",
									"    }, (err, res) => {\r",
									"        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
									"    })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "ApplicationToken",
								"value": "{{APLICATIONTOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASEURL}}/Invoice/CancelInvoice?Id=1",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"Invoice",
								"CancelInvoice"
							],
							"query": [
								{
									"key": "Id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetInvoice",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var Atual = new Date()\r",
									"var customId = Number(Atual)\r",
									"pm.collectionVariables.set('CustomId', customId)\r",
									"\r",
									"//Checa se as variaveis obrigatorias estao preenchidas\r",
									"if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
									"    throw new Error('Usuario ou senha em branco')\r",
									"}\r",
									"if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
									"    throw new Error('ApplicationToken em branco')\r",
									"}\r",
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
									"    method: 'POST',\r",
									"    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        \"urlencoded\": [\r",
									"            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
									"            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
									"            { key: \"grant_type\", value: \"password\" }\r",
									"        ]\r",
									"    }\r",
									"    }, (err, res) => {\r",
									"        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
									"    })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "ApplicationToken",
								"value": "{{APLICATIONTOKEN}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{AccessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASEURL}}/Invoice/GetInvoice?Id=0632add4-898f-4aa9-8e51-99c1f2b8e579",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"Invoice",
								"GetInvoice"
							],
							"query": [
								{
									"key": "Id",
									"value": "0632add4-898f-4aa9-8e51-99c1f2b8e579"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetStatus",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var Atual = new Date()\r",
									"var customId = Number(Atual)\r",
									"pm.collectionVariables.set('CustomId', customId)\r",
									"\r",
									"//Checa se as variaveis obrigatorias estao preenchidas\r",
									"if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
									"    throw new Error('Usuario ou senha em branco')\r",
									"}\r",
									"if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
									"    throw new Error('ApplicationToken em branco')\r",
									"}\r",
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
									"    method: 'POST',\r",
									"    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        \"urlencoded\": [\r",
									"            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
									"            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
									"            { key: \"grant_type\", value: \"password\" }\r",
									"        ]\r",
									"    }\r",
									"    }, (err, res) => {\r",
									"        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
									"    })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "ApplicationToken",
								"value": "{{APLICATIONTOKEN}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{AccessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASEURL}}/Invoice/getstatus?Id=0632add4-898f-4aa9-8e51-99c1f2b8e579",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"Invoice",
								"getstatus"
							],
							"query": [
								{
									"key": "Id",
									"value": "0632add4-898f-4aa9-8e51-99c1f2b8e579"
								}
							]
						},
						"description": "Request:\n\nHeaders:\n\n- ApplicationToken\n- Authorization"
					},
					"response": [
						{
							"name": "GetStatus",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "ApplicationToken",
										"value": "{{APLICATIONTOKEN}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{AccessToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASEURL}}/Invoice/getstatus?Id=0632add4-898f-4aa9-8e51-99c1f2b8e579",
									"host": [
										"{{BASEURL}}"
									],
									"path": [
										"Invoice",
										"getstatus"
									],
									"query": [
										{
											"key": "Id",
											"value": "0632add4-898f-4aa9-8e51-99c1f2b8e579"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Length",
									"value": "225"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Expires",
									"value": "Sun, 02 Jul 2023 19:27:51 GMT"
								},
								{
									"key": "Cache-Control",
									"value": "max-age=0, no-cache, no-store"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Date",
									"value": "Sun, 02 Jul 2023 19:27:51 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"Pending\",\n    \"paymentDate\": null,\n    \"dueDate\": \"30/12/2023\",\n    \"cancelDate\": null,\n    \"id\": \"0632add4-898f-4aa9-8e51-99c1f2b8e579\",\n    \"currency\": \"\",\n    \"total\": 1,\n    \"totalPaid\": 0,\n    \"error\": false,\n    \"returnCode\": \"00\",\n    \"returnMessage\": \"Success\"\n}"
						}
					]
				},
				{
					"name": "GetStatusId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var Atual = new Date()\r",
									"var customId = Number(Atual)\r",
									"pm.collectionVariables.set('CustomId', customId)\r",
									"\r",
									"//Checa se as variaveis obrigatorias estao preenchidas\r",
									"if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
									"    throw new Error('Usuario ou senha em branco')\r",
									"}\r",
									"if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
									"    throw new Error('ApplicationToken em branco')\r",
									"}\r",
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
									"    method: 'POST',\r",
									"    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        \"urlencoded\": [\r",
									"            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
									"            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
									"            { key: \"grant_type\", value: \"password\" }\r",
									"        ]\r",
									"    }\r",
									"    }, (err, res) => {\r",
									"        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
									"    })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "ApplicationToken",
								"value": "{{APLICATIONTOKEN}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{AccessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASEURL}}/Invoice/GetStatus/2?Id=0632add4-898f-4aa9-8e51-99c1f2b8e579",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"Invoice",
								"GetStatus",
								"2"
							],
							"query": [
								{
									"key": "Id",
									"value": "0632add4-898f-4aa9-8e51-99c1f2b8e579"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PIX",
			"item": [
				{
					"name": "Deposit",
					"item": [
						{
							"name": "PaymentPix",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var Atual = new Date()\r",
											"var customId = Number(Atual)\r",
											"pm.collectionVariables.set('CustomId', customId)\r",
											"\r",
											"//Checa se as variaveis obrigatorias estao preenchidas\r",
											"if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
											"    throw new Error('Usuario ou senha em branco')\r",
											"}\r",
											"if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
											"    throw new Error('ApplicationToken em branco')\r",
											"}\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
											"    method: 'POST',\r",
											"    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
											"    body: {\r",
											"        mode: 'urlencoded',\r",
											"        \"urlencoded\": [\r",
											"            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
											"            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
											"            { key: \"grant_type\", value: \"password\" }\r",
											"        ]\r",
											"    }\r",
											"    }, (err, res) => {\r",
											"        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ApplicationToken",
										"value": "{{APLICATIONTOKEN}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{AccessToken}}",
										"type": "text"
									},
									{
										"key": "x-request-Id",
										"value": "1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"CustomId\": \"{{CustomId}}\",\r\n    \"amount\": 100,\r\n    \"dueDate\": \"30/12/2023\",\r\n    \"txId\": null,\r\n    \"customer\": {\r\n        \"name\": \"SANDBOX PEOPLE NAME\",\r\n        \"email\": \"sandbox.people@email.sandbox.com\",\r\n        \"cpfcnpj\": \"87397163769\",\r\n        \"address\": \"STREET 01, NUMBER 02 - HOUSE 03\",\r\n        \"neighborhood\": \"NEIGHBORHOOD\",\r\n        \"city\": \"CITY\",\r\n        \"state\": \"UF\",\r\n        \"country\": \"BRAZIL\",\r\n        \"zipcode\": \"12345678\"\r\n    },\r\n    \"recipient\": {\r\n        \"name\": \"SANDBOX PEOPLE RECEIVER\",\r\n        \"cpfcnpj\": \"87397163769\",\r\n        \"email\": \"sandbox.people.receiver@email.sandbox.com\"\r\n    },\r\n    \"additionalInformation\": [\r\n        {\r\n            \"name\": \"Nome Recebedor\",\r\n            \"value\": \"SANDBOX PEOPLE NAME\"\r\n        },\r\n        {\r\n            \"name\": \"CPF Recebedor\",\r\n            \"value\": \"***.456.789-**\"\r\n        }\r\n    ],\r\n    \"confirmationUrl\": \"https://webhook.site/495472fc-207d-45ae-8c5d-731ec32779d4\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASEURL}}/payment/pix",
									"host": [
										"{{BASEURL}}"
									],
									"path": [
										"payment",
										"pix"
									]
								},
								"description": "Create a charge for payment via PIX and return the PIX code, value and QRCode.\n\n**Pre-Request Script:**\n\n**1-** Before calling the \"/payment/pix\" endpoint, we must call the Token endpoint. In the Token response, we get the access_token.\n\n**Example:**\n\n{\n\n\"access_token\": \"akOAKwg0gb8Lt2_yziDr8y_wAOfAWziaPa9oFLZkTclIHNKKwtj8k0_K7aNMdVUooAOgBq7LpR0T23NpQwICFSnYtqbHSJrQaaP-XFiqIfQwr4buhI4DVcskwK3KZJ2bPEfdMGeNAEMay-zMm9bDdpKzs95AlI2ymPYDL8_R0V2528l4h645arRa2DV5sXwsxNvNGQRlFKsEZKF5Zp8-dQALSrsb6DUF18TsHbOGZdY\",\n\n\"token_type\": \"bearer\",\n\n\"expires_in\": 3599\n\n}\n\nThe access_token we will use from the request, as shown in the example below:\n\n**Authorization**: Bearer + access_token\n\n| **Parameter** | **Type** | **Length** | **Required** | **Description** |\n| --- | --- | --- | --- | --- |\n| customid | String | 20 | Yes | Invoice |\n| amount | Int |  | Yes | Invoice value |\n| txId | String | 25 | Not | TxId of QRCode Pix |\n| dueDate | Date |  | Yes | Due date format(dd/mm/yyyy) |\n| customer.name | string | 80 | Yes | Customer name |\n| customer.email | string | 100 | Yes | Customer e-mail |\n| customer.addres | string | 100 | Yes | Customer address |\n| customer.neighborhood | string | 80 | Yes | Neighborhood |\n| customer.city | string | 80 | Yes | City |\n| customer.state | string | 2 | Yes | State abbreviation |\n| customer.country | string | 80 | Yes | Country |\n| customer.zipcode | string | 10 | Yes | Zipcode |\n| recipient.name | String | 80 | No | Receipent name (destination of money) |\n| recipient.CPFCNPJ | String | 14 | No | Receipent personal document |\n| recipient.email | String | 100 | No | Receipent email |\n| additionalInformation | List | N/A | No | Additional information of transaction |\n| additionalInformation.name | String | 50 | No | Name of information |\n| additionalInformation.value | String | 100 | No | Value of this information |\n| confirmationUrl | string | 250 | No | URL that our system will send the POST for payment confirmation |\n\n## Headers\n\n**ApplicationToken**\n\n**Authorization: (bearer + token)**\n\n**x-request-id (**\n\nOptional parameter where the customer can enter a hash code at the time of deposit.\n\nWhen using the x-request-id parameter, the client must send in Uppercase.\n\nThe value informed in the x-request-id parameter will be encrypted using the applicationtoken as key.  \nThe method used for encryption is the HMAC-SHA256 passing two parameters, the first being the value of the x-request-id, and the second the value that comes in the Applicationtoken parameter.\n\nYou can use the site [https://www.devglan.com/online-tools/hmac-sha256-online](https://www.devglan.com/online-tools/hmac-sha256-online) to encrypt your token.\n\nThis parameter will be used in callback control on successful operations.\n\nThis field supports values ​​of up to 68 characters.\n\n**)**\n\n## Pix Random Key\n\nIn response to the request, a random deposit key will be generated. Through the qrCodeString property.\n\nThrough this code, the partner's UI will make a deposit."
							},
							"response": [
								{
									"name": "PaymentPix",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "ApplicationToken",
												"value": "d39bef36-e989-4a50-8301-8adaf61352a0",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"CustomId\": \"\",\r\n    \"amount\": 100,\r\n    \"dueDate\": \"30/12/2023\",\r\n    \"customer\": {\r\n        \"name\": \"SANDBOX PEOPLE NAME\",\r\n        \"email\": \"sandbox.people@email.sandbox.com\",\r\n        \"cpfcnpj\": \"87397163769\",\r\n        \"address\": \"STREET 01, NUMBER 02 - HOUSE 03\",\r\n        \"neighborhood\": \"NEIGHBORHOOD\",\r\n        \"city\": \"CITY\",\r\n        \"state\": \"UF\",\r\n        \"country\": \"BRAZIL\",\r\n        \"zipcode\": \"12345678\"\r\n    },\r\n    \"confirmationUrl\": \"https://webhook.site/495472fc-207d-45ae-8c5d-731ec32779d4\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://api.skilldigital.com.br/payment/pix",
											"protocol": "http",
											"host": [
												"api",
												"skilldigital",
												"com",
												"br"
											],
											"path": [
												"payment",
												"pix"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "private"
										},
										{
											"key": "Content-Length",
											"value": "33926"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Server",
											"value": "Microsoft-IIS/10.0"
										},
										{
											"key": "X-AspNet-Version",
											"value": "4.0.30319"
										},
										{
											"key": "X-Powered-By",
											"value": "ASP.NET"
										},
										{
											"key": "Date",
											"value": "Mon, 06 Mar 2023 11:28:41 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": false,\n    \"returnCode\": \"00\",\n    \"returnMessage\": \"Success\",\n    \"customId\": \"1678102115334\",\n    \"txId\": \"eb844fe1d978491a9e7ac8975667baf0\",\n    \"id\": \"b285dde9-95d8-46f2-83fd-b4ef7970c86e\",\n    \"invoiceCode\": \"9W6CX4W\",\n    \"paymentUrl\": \"http://sandbox.painel.skilldigital.com.br/c/b285dde9-95d8-46f2-83fd-b4ef7970c86e\",\n    \"amount\": 100,\n    \"dueDate\": null,\n    \"qrCodeString\": \"00020126910014BR.GOV.BCB.PIX2569api-pix-h.bancobs2.com.br/spi/v2/06b3464f-d3b1-495f-af75-a27523bec00452040000530398654041.005802BR5925Skill Digital Participacoes Eir6014Belo Horizonte61083038040362070503***63047B84\",\n    \"urlQRCode\": \"https://chart.googleapis.com/chart?chs=250x250&cht=qr&chl=00020126910014BR.GOV.BCB.PIX2569api-pix-h.bancobs2.com.br/spi/v2/06b3464f-d3b1-495f-af75-a27523bec00452040000530398654041.005802BR5925Skill Digital Participacoes Eir6014Belo Horizonte61083038040362070503***63047B84\",\n    \"qrCodeBase64\": \"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\",\n    \"recurrence\": false,\n    \"split\": false\n}"
								}
							]
						},
						{
							"name": "PutConfirmation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var Atual = new Date()\r",
											"var customId = Number(Atual)\r",
											"pm.collectionVariables.set('CustomId', customId)\r",
											"\r",
											"//Checa se as variaveis obrigatorias estao preenchidas\r",
											"if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
											"    throw new Error('Usuario ou senha em branco')\r",
											"}\r",
											"if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
											"    throw new Error('ApplicationToken em branco')\r",
											"}\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
											"    method: 'POST',\r",
											"    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
											"    body: {\r",
											"        mode: 'urlencoded',\r",
											"        \"urlencoded\": [\r",
											"            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
											"            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
											"            { key: \"grant_type\", value: \"password\" }\r",
											"        ]\r",
											"    }\r",
											"    }, (err, res) => {\r",
											"        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "ApplicationToken",
										"value": "{{APLICATIONTOKEN}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{AccessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"a7303ba1-c265-4400-ad69-6e64e7e560b0\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASEURL}}/invoice/putconfirmation",
									"host": [
										"{{BASEURL}}"
									],
									"path": [
										"invoice",
										"putconfirmation"
									]
								},
								"description": "Sends payment confirmation to the URL informed when creating the charge if it has already been paid.\n\nFor payment confirmation validation purposes, in a Sandbox environment, this method sends a request to the URL every time it is executed, regardless of the current billing status.\n\n| **Parameter** | **Type** | **Length** | **Required** | **Description** |\n| --- | --- | --- | --- | --- |\n| id | string |  | Yes | Billing ID returned upon creation |"
							},
							"response": [
								{
									"name": "PutConfirmation",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "ApplicationToken",
												"value": "d39bef36-e989-4a50-8301-8adaf61352a0",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"a7303ba1-c265-4400-ad69-6e64e7e560b0\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://api.skilldigital.com.br/invoice/putconfirmation",
											"protocol": "http",
											"host": [
												"api",
												"skilldigital",
												"com",
												"br"
											],
											"path": [
												"invoice",
												"putconfirmation"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "private"
										},
										{
											"key": "Content-Length",
											"value": "325"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Server",
											"value": "Microsoft-IIS/10.0"
										},
										{
											"key": "X-AspNet-Version",
											"value": "4.0.30319"
										},
										{
											"key": "X-Powered-By",
											"value": "ASP.NET"
										},
										{
											"key": "Date",
											"value": "Mon, 06 Mar 2023 21:52:28 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": false,\n    \"returnCode\": \"00\",\n    \"returnMessage\": \"Success\",\n    \"id\": \"a7303ba1-c265-4400-ad69-6e64e7e560b0\",\n    \"invoiceCode\": \"1673966309202\",\n    \"status\": \"Pending\",\n    \"amount\": 100,\n    \"dueDate\": \"30/12/2023\",\n    \"paymentDate\": null,\n    \"amountPaid\": 0,\n    \"paymentCurrency\": null,\n    \"cancelDate\": null\n}"
								}
							]
						}
					],
					"description": "Endpoint is responsible for carrying out deposit operations."
				},
				{
					"name": "Withdraw",
					"item": [
						{
							"name": "TransferPix",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var Atual = new Date()\r",
											"var customId = Number(Atual)\r",
											"pm.collectionVariables.set('CustomId', customId)\r",
											"\r",
											"//Checa se as variaveis obrigatorias estao preenchidas\r",
											"if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
											"    throw new Error('Usuario ou senha em branco')\r",
											"}\r",
											"if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
											"    throw new Error('ApplicationToken em branco')\r",
											"}\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
											"    method: 'POST',\r",
											"    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
											"    body: {\r",
											"        mode: 'urlencoded',\r",
											"        \"urlencoded\": [\r",
											"            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
											"            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
											"            { key: \"grant_type\", value: \"password\" }\r",
											"        ]\r",
											"    }\r",
											"    }, (err, res) => {\r",
											"        var signBytes = CryptoJS.HmacSHA256(res.json().access_token, pm.collectionVariables.get('CRP-TOKEN'));\r",
											"        var signHex = CryptoJS.enc.Hex.stringify(signBytes);\r",
											"        pm.collectionVariables.set('AssinaturaDigital', signHex);\r",
											"        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
											"    })"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ApplicationToken",
										"value": "{{APLICATIONTOKEN}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{AccessToken}}",
										"type": "text"
									},
									{
										"key": "x-request-id",
										"value": "1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"digitalSignature\": \"{{AssinaturaDigital}}\",\r\n    \"customId\": \"{{CustomId}}\",\r\n    \"amount\": 1,\r\n    \"favorecido\": {\r\n        \"nome\": \"SANDBOX PEOPLE NAME\",\r\n        \"cpfcnpj\": \"12065348771\",\r\n        \"chave\": {\r\n            \"idTipoChavePIX\": 3,\r\n            \"chavePIX\": \"ysilva@pigpag.com.br\"\r\n        }\r\n    },\r\n    \"confirmationUrl\": \"https://webhook.site/d5aaad3c-d8d2-4c9d-b25a-c95250af24de\",\r\n    \"updateUrl\": \"https://webhook.site/d5aaad3c-d8d2-4c9d-b25a-c95250af24de\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASEURL}}/transfer/pix",
									"host": [
										"{{BASEURL}}"
									],
									"path": [
										"transfer",
										"pix"
									]
								},
								"description": "Responsible for carrying out the withdrawal.\n\n**Pre-Request Script:**\n\n**1-** Before calling the \"/transfer/pix\" endpoint, we must call the Token endpoint. In the Token response, we get the access_token.\n\n**Example:**\n\n{\n\n\"access_token\": \"akOAKwg0gb8Lt2_yziDr8y_wAOfAWziaPa9oFLZkTclIHNKKwtj8k0_K7aNMdVUooAOgBq7LpR0T23NpQwICFSnYtqbHSJrQaaP-XFiqIfQwr4buhI4DVcskwK3KZJ2bPEfdMGeNAEMay-zMm9bDdpKzs95AlI2ymPYDL8_R0V2528l4h645arRa2DV5sXwsxNvNGQRlFKsEZKF5Zp8-dQALSrsb6DUF18TsHbOGZdY\",\n\n\"token_type\": \"bearer\",\n\n\"expires_in\": 3599\n\n}\n\n**2-** After generating the Token, we will use the HMAC-SHA256 function passing two input parameters. Being the first access_token, and the second 8E765DB0-9C1C-44D0-85AB-8FD0B2E7D7CD (SANDBOX environment)\n\nThe result of the HMAC-SHA256 operation must be stored in a variable.\n\n**Example Postman:**\n\nvar signBytes = CryptoJS.HmacSHA256(res.json().access_token, pm.collectionVariables.get('CRP-TOKEN'));\n\n**3-** Next, we must use a function to convert the result of the HMAC-SHA256 operation into a hexadecimal string. The resulting hexadecimal string is stored in the signHex variable.\n\n**Example Postman:**\n\nvar signHex = CryptoJS.enc.Hex.stringify(signBytes);\n\nThe result stored in the signHex variable will be used in the request body, in the \"digitalSignature\" property.\n\n## Headers\n\n**ApplicationToken**\n\n**Authorization: (bearer + token)**\n\n**x-request-id (**\n\nOptional parameter where the customer can enter a hash code at the time of withdrawal.\n\nWhen using the x-request-id parameter, the client must send in Uppercase.\n\nThe value informed in the x-request-id parameter will be encrypted using the applicationtoken as key.  \nThe method used for encryption is the  \nHMAC-SHA256 passing two parameters, the first being the value of the x-resquest-id, and the second being the value of the Applicationtoken parameter.\n\nYou can use the site [https://www.devglan.com/online-tools/hmac-sha256-online](https://www.devglan.com/online-tools/hmac-sha256-online) to encrypt your token.\n\nThis parameter will be used in callback control on successful operations.\n\nThis field supports values ​​of up to 68 characters.\n\n**)**\n\n| **Parameter** | **Type** | **Length** | **Required** | **Description** |\n| --- | --- | --- | --- | --- |\n| digitalSignature | string | 100 | yes | Security digital signature for balance transactions. The electronic signature is created through encryption of the access_token (Bearer token used to authenticate in the API). The method used for encryption is HMAC-SHA256 and the key used must be the Security Token (obtained on the Security Token screen in the Integrations menu) |\n| amount | int |  | yes | amount to be transferred |\n| customId | String | 50 | No | Your invoice number for conciliation |\n| favorecido.nome | string | 50 | yes | favored name |\n| favorecido.cpfcnpj | string | 14 | yes | favored CPF or CNPJ |\n| favorecido.chave.idTipoChavePIX | int |  | yes | PIX key type |\n| confirmationUrl | string | 150 | yes | callback |\n| updateUrl | string | 150 | yes | callback |\n\nResponse:\n\n| **Parameter** | **Type** | **Length** | **Required** | **Description** |\n| --- | --- | --- | --- | --- |\n| returnCode | int |  | yes | error return code |\n| returnMessage | string | 50 | yes | success or error message |\n| withdrawCode | string | 50 | yes | Code identifying the withdrawal |\n| authenticationCode | string | 50 | yes | Transaction authentication code |\n| transactionId | string | 50 | yes | Transaction Id |\n| status | string | 50 |  | message guiding the current status of the transaction |"
							},
							"response": [
								{
									"name": "TransferPix",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "ApplicationToken",
												"value": "d39bef36-e989-4a50-8301-8adaf61352a0",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"digitalSignature\": \"\",\r\n    \"amount\": 1,\r\n    \"favorecido\": {\r\n        \"nome\": \"SANDBOX PEOPLE NAME\",\r\n        \"cpfcnpj\": \"87397163769\",\r\n        \"chave\": {\r\n            \"idTipoChavePIX\": 1,\r\n            \"chavePIX\": \"87397163769\"\r\n        }\r\n    },\r\n    \"confirmationUrl\": \"https://webhook.site/495472fc-207d-45ae-8c5d-731ec32779d4\",\r\n    \"updateUrl\": \"https://webhook.site/495472fc-207d-45ae-8c5d-731ec32779d4\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://api.skilldigital.com.br/transfer/pix",
											"protocol": "http",
											"host": [
												"api",
												"skilldigital",
												"com",
												"br"
											],
											"path": [
												"transfer",
												"pix"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "private"
										},
										{
											"key": "Content-Length",
											"value": "283"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Server",
											"value": "Microsoft-IIS/10.0"
										},
										{
											"key": "X-AspNet-Version",
											"value": "4.0.30319"
										},
										{
											"key": "X-Powered-By",
											"value": "ASP.NET"
										},
										{
											"key": "Date",
											"value": "Mon, 06 Mar 2023 16:01:49 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": false,\n    \"returnCode\": \"00\",\n    \"returnMessage\": \"Success\",\n    \"withdrawCode\": \"HN6Q1GBS5X\",\n    \"authenticationCode\": \"11b86417-b007-45bd-bfeb-a97c38e13d61\",\n    \"transactionId\": \"11b86417-b007-45bd-bfeb-a97c38e13d61\",\n    \"status\": \"Received and Awaiting processing\"\n}"
								}
							]
						},
						{
							"name": "PixPutConfirmation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var Atual = new Date()\r",
											"var customId = Number(Atual)\r",
											"pm.collectionVariables.set('CustomId', customId)\r",
											"\r",
											"//Checa se as variaveis obrigatorias estao preenchidas\r",
											"if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
											"    throw new Error('Usuario ou senha em branco')\r",
											"}\r",
											"if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
											"    throw new Error('ApplicationToken em branco')\r",
											"}\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
											"    method: 'POST',\r",
											"    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
											"    body: {\r",
											"        mode: 'urlencoded',\r",
											"        \"urlencoded\": [\r",
											"            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
											"            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
											"            { key: \"grant_type\", value: \"password\" }\r",
											"        ]\r",
											"    }\r",
											"    }, (err, res) => {\r",
											"        var signBytes = CryptoJS.HmacSHA256(res.json().access_token, pm.collectionVariables.get('CRP-TOKEN'));\r",
											"        var signHex = CryptoJS.enc.Hex.stringify(signBytes);\r",
											"        pm.collectionVariables.set('AssinaturaDigital', signHex);\r",
											"        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "ApplicationToken",
										"value": "{{APLICATIONTOKEN}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{AccessToken}}",
										"type": "text"
									},
									{
										"key": "digitalSignature",
										"value": "{{AssinaturaDigital}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"digitalSignature\": \"{{AssinaturaDigital}}\",\r\n    \"withdrawCode\": \"RUR5IXXHHV\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASEURL}}/transfer/putconfirmation",
									"host": [
										"{{BASEURL}}"
									],
									"path": [
										"transfer",
										"putconfirmation"
									]
								}
							},
							"response": []
						},
						{
							"name": "InitializePaymentPix",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var Atual = new Date()\r",
											"var customId = Number(Atual)\r",
											"pm.collectionVariables.set('CustomId', customId)\r",
											"\r",
											"//Checa se as variaveis obrigatorias estao preenchidas\r",
											"if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
											"    throw new Error('Usuario ou senha em branco')\r",
											"}\r",
											"if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
											"    throw new Error('ApplicationToken em branco')\r",
											"}\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
											"    method: 'POST',\r",
											"    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
											"    body: {\r",
											"        mode: 'urlencoded',\r",
											"        \"urlencoded\": [\r",
											"            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
											"            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
											"            { key: \"grant_type\", value: \"password\" }\r",
											"        ]\r",
											"    }\r",
											"    }, (err, res) => {\r",
											"        var signBytes = CryptoJS.HmacSHA256(res.json().access_token, pm.collectionVariables.get('CRP-TOKEN'));\r",
											"        var signHex = CryptoJS.enc.Hex.stringify(signBytes);\r",
											"        pm.collectionVariables.set('AssinaturaDigital', signHex);\r",
											"        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ApplicationToken",
										"value": "{{APLICATIONTOKEN}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{AccessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"digitalSignature\": \"{{AssinaturaDigital}}\",\r\n  \"amount\": 1,\r\n  \"chavePIX\": \"ysilva@pigpag.com.br\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASEURL}}/transfer/initializepaymentpix",
									"host": [
										"{{BASEURL}}"
									],
									"path": [
										"transfer",
										"initializepaymentpix"
									]
								}
							},
							"response": [
								{
									"name": "InitializePaymentPix",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "ApplicationToken",
												"value": "{{APLICATIONTOKEN}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{AccessToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"digitalSignature\": \"{{AssinaturaDigital}}\",\r\n  \"amount\": 1,\r\n  \"chavePIX\": \"ysilva@pigpag.com.br\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASEURL}}/transfer/initializepaymentpix",
											"host": [
												"{{BASEURL}}"
											],
											"path": [
												"transfer",
												"initializepaymentpix"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Length",
											"value": "396"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Date",
											"value": "Sun, 15 Oct 2023 06:12:33 GMT"
										},
										{
											"key": "Server",
											"value": "Kestrel"
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": false,\n    \"returnCode\": \"00\",\n    \"returnMessage\": \"Success\",\n    \"chavePIX\": \"ysilva@pigpag.com.br\",\n    \"nomeCorrentista\": \"Yuri Monteiro da Silva\",\n    \"cpfCnpj\": \"12065348771\",\n    \"contaDto\": {\n        \"conta\": \"722554403\",\n        \"tipoConta\": 3,\n        \"agencia\": \"1\",\n        \"ispb\": \"18236120\"\n    },\n    \"bancoDto\": {\n        \"descricao\": \"NU PAGAMENTOS S.A. - INSTITUIÇÃO DE PAGAMENTO\",\n        \"numero\": \"18236120\",\n        \"ispb\": \"18236120\"\n    },\n    \"ticket\": \"602ca15b159e4d52a4ff7f03e12682e5\"\n}"
								}
							]
						},
						{
							"name": "TransferPix - With Ticket",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var Atual = new Date()\r",
											"var customId = Number(Atual)\r",
											"pm.collectionVariables.set('CustomId', customId)\r",
											"\r",
											"//Checa se as variaveis obrigatorias estao preenchidas\r",
											"if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
											"    throw new Error('Usuario ou senha em branco')\r",
											"}\r",
											"if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
											"    throw new Error('ApplicationToken em branco')\r",
											"}\r",
											"pm.sendRequest({\r",
											"    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
											"    method: 'POST',\r",
											"    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
											"    body: {\r",
											"        mode: 'urlencoded',\r",
											"        \"urlencoded\": [\r",
											"            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
											"            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
											"            { key: \"grant_type\", value: \"password\" }\r",
											"        ]\r",
											"    }\r",
											"    }, (err, res) => {\r",
											"        var signBytes = CryptoJS.HmacSHA256(res.json().access_token, pm.collectionVariables.get('CRP-TOKEN'));\r",
											"        var signHex = CryptoJS.enc.Hex.stringify(signBytes);\r",
											"        pm.collectionVariables.set('AssinaturaDigital', signHex);\r",
											"        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "ApplicationToken",
										"value": "{{APLICATIONTOKEN}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "{{AccessToken}}",
										"type": "text"
									},
									{
										"key": "x-request-id",
										"value": "1",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"digitalSignature\": \"{{AssinaturaDigital}}\",\r\n    \"customId\": \"{{CustomId}}\",\r\n    \"amount\": 1,\r\n    \"ticket\": \"602ca15b159e4d52a4ff7f03e12682e5\",\r\n    \"favorecido\": {\r\n        \"nome\": \"Yuri Monteiro da Silva\",\r\n        \"cpfcnpj\": \"12065348771\",\r\n        \"chave\": {\r\n            \"idTipoChavePIX\": 3,\r\n            \"chavePIX\": \"ysilva@pigpag.com.br\"\r\n        }\r\n    },\r\n    \"confirmationUrl\": \"https://webhook.site/aca73912-7d4a-4c18-bc8a-2124c36eb620\",\r\n    \"updateUrl\": \"https://webhook.site/aca73912-7d4a-4c18-bc8a-2124c36eb620\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASEURL}}/transfer/pix",
									"host": [
										"{{BASEURL}}"
									],
									"path": [
										"transfer",
										"pix"
									]
								},
								"description": "Responsible for carrying out the withdrawal.\n\n**Pre-Request Script:**\n\n**1-** Before calling the \"/transfer/pix\" endpoint, we must call the Token endpoint. In the Token response, we get the access_token.\n\n**Example:**\n\n{\n\n\"access_token\": \"akOAKwg0gb8Lt2_yziDr8y_wAOfAWziaPa9oFLZkTclIHNKKwtj8k0_K7aNMdVUooAOgBq7LpR0T23NpQwICFSnYtqbHSJrQaaP-XFiqIfQwr4buhI4DVcskwK3KZJ2bPEfdMGeNAEMay-zMm9bDdpKzs95AlI2ymPYDL8_R0V2528l4h645arRa2DV5sXwsxNvNGQRlFKsEZKF5Zp8-dQALSrsb6DUF18TsHbOGZdY\",\n\n\"token_type\": \"bearer\",\n\n\"expires_in\": 3599\n\n}\n\n**2-** After generating the Token, we will use the HMAC-SHA256 function passing two input parameters. Being the first access_token, and the second 8E765DB0-9C1C-44D0-85AB-8FD0B2E7D7CD (SANDBOX environment)\n\nThe result of the HMAC-SHA256 operation must be stored in a variable.\n\n**Example Postman:**\n\nvar signBytes = CryptoJS.HmacSHA256(res.json().access_token, pm.collectionVariables.get('CRP-TOKEN'));\n\n**3-** Next, we must use a function to convert the result of the HMAC-SHA256 operation into a hexadecimal string. The resulting hexadecimal string is stored in the signHex variable.\n\n**Example Postman:**\n\nvar signHex = CryptoJS.enc.Hex.stringify(signBytes);\n\nThe result stored in the signHex variable will be used in the request body, in the \"digitalSignature\" property.\n\n## Headers\n\n**ApplicationToken**\n\n**Authorization: (bearer + token)**\n\n**x-request-id (**\n\nOptional parameter where the customer can enter a hash code at the time of withdrawal.\n\nWhen using the x-request-id parameter, the client must send in Uppercase.\n\nThe value informed in the x-request-id parameter will be encrypted using the applicationtoken as key.  \nThe method used for encryption is the  \nHMAC-SHA256 passing two parameters, the first being the value of the x-resquest-id, and the second being the value of the Applicationtoken parameter.\n\nYou can use the site [https://www.devglan.com/online-tools/hmac-sha256-online](https://www.devglan.com/online-tools/hmac-sha256-online) to encrypt your token.\n\nThis parameter will be used in callback control on successful operations.\n\nThis field supports values ​​of up to 68 characters.\n\n**)**\n\n| **Parameter** | **Type** | **Length** | **Required** | **Description** |\n| --- | --- | --- | --- | --- |\n| digitalSignature | string | 100 | yes | Security digital signature for balance transactions. The electronic signature is created through encryption of the access_token (Bearer token used to authenticate in the API). The method used for encryption is HMAC-SHA256 and the key used must be the Security Token (obtained on the Security Token screen in the Integrations menu) |\n| amount | int |  | yes | amount to be transferred |\n| customId | String | 50 | No | Your invoice number for conciliation |\n| favorecido.nome | string | 50 | yes | favored name |\n| favorecido.cpfcnpj | string | 14 | yes | favored CPF or CNPJ |\n| favorecido.chave.idTipoChavePIX | int |  | yes | PIX key type |\n| confirmationUrl | string | 150 | yes | callback |\n| updateUrl | string | 150 | yes | callback |\n\nResponse:\n\n| **Parameter** | **Type** | **Length** | **Required** | **Description** |\n| --- | --- | --- | --- | --- |\n| returnCode | int |  | yes | error return code |\n| returnMessage | string | 50 | yes | success or error message |\n| withdrawCode | string | 50 | yes | Code identifying the withdrawal |\n| authenticationCode | string | 50 | yes | Transaction authentication code |\n| transactionId | string | 50 | yes | Transaction Id |\n| status | string | 50 |  | message guiding the current status of the transaction |"
							},
							"response": [
								{
									"name": "TransferPix - With Ticket",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "ApplicationToken",
												"value": "{{APLICATIONTOKEN}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "{{AccessToken}}",
												"type": "text"
											},
											{
												"key": "x-request-id",
												"value": "1",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"digitalSignature\": \"{{AssinaturaDigital}}\",\r\n    \"customId\": \"{{CustomId}}\",\r\n    \"amount\": 1,\r\n    \"ticket\": \"E3822485720231015062055883538021\",\r\n    \"favorecido\": {\r\n        \"nome\": \"ERICK PEREIRA NAGATA\",\r\n        \"cpfcnpj\": \"37119774808\",\r\n        \"chave\": {\r\n            \"idTipoChavePIX\": 1,\r\n            \"chavePIX\": \"37119774808\"\r\n        }\r\n    },\r\n    \"confirmationUrl\": \"https://webhook.site/aca73912-7d4a-4c18-bc8a-2124c36eb620\",\r\n    \"updateUrl\": \"https://webhook.site/aca73912-7d4a-4c18-bc8a-2124c36eb620\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASEURL}}/transfer/pix",
											"host": [
												"{{BASEURL}}"
											],
											"path": [
												"transfer",
												"pix"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Length",
											"value": "273"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Date",
											"value": "Sun, 15 Oct 2023 06:22:22 GMT"
										},
										{
											"key": "Server",
											"value": "Kestrel"
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": false,\n    \"returnCode\": \"00\",\n    \"returnMessage\": \"Success\",\n    \"withdrawCode\": \"43ELFXUWP1\",\n    \"customId\": \"1697350937546\",\n    \"authenticationCode\": \"df749e3f-a15c-4754-8f60-160c7e6e9d1e\",\n    \"transactionId\": \"df749e3f-a15c-4754-8f60-160c7e6e9d1e\",\n    \"status\": \"Received and Awaiting processing\"\n}"
								}
							]
						}
					],
					"description": "Endpoints responsible for the withdrawal operation."
				},
				{
					"name": "Webhook",
					"item": [],
					"description": "### Deposit CallBack\n\nOnce the deposit is requested using the Deposit method \"/payment/pix\" will generate the QRCode Pix for the deposit to be made, and it will remain in pending status until it is paid. After payment, the system will return the data according to the JSON below:\n\nDeposit completed:\n\n{  \n\"customId\": \"2545962\",  \n\"id\": \"3af0009c-88ec-4b30-a63d-eddfeb0cf369\",  \n\"paymentmethod\": \"PIX\",  \n\"installments\": \"1\",  \n\"paymentDate\": \"2022-11-04\",  \n\"total\": 200,  \n\"totalPaid\": 200,  \n\"original_currency\": \"BRL\",  \n\"payment_currency\": \"BRL\",  \n\"status\": \"Paid\",  \n\"paid_by_cripto_currency\": \"false\",  \n\"hash\": null,  \n\"address\": null  \n}\n\n#### Updates:\n\nThe x-request-id parameter was implemented in the callback.\n\nThis parameter will be used in callback control on successful operations.\n\nThe x-request-id parameter will be sent in the header of the callback function.\n\n**Important: We suggest that there be a control in the API that will receive the callback so that if a request is sent more than once, due to some network need, the action is not duplicated**\n\n### Withdraw CallBack\n\nTo any updates into transaction, we use updateUrl.  \nif one transaction is received, started payment (bank of Brazil) and completed, we use the confirmationUrl that you sent when the request it's made\n\nIf one transaction is received, the payment is started at bank and during this process a problem occur, our system will send callback to you using the updateUrl, to you Update the status insted of \"Received and Processing\" to \"Rejected\" or \"Declined\"  \nBecause of this, the response model is not the same.\n\nPlease attention for bellow case:  \nOne transaction can be 100% completed and after same minutes de bank of Brazil update the status to Rejected, and in this cases, we send callback to you 2 times.  \nFirst time through confirmation Url to inform that transaction was completed, and then, through updateUrl to inform that a problem occurred.\n\n**Examples:**\n\nBellow is the examples of request to updateUrl:\n\nIn this case a instability occurred on payment system of brazilian central bank or in the banks that we use:\n\n{  \n\"withdrawCode\": \"3BKT9405J6\",  \n\"transactionCode\": null,  \n\"updateCode\": \"01\",  \n\"updateMessage\": \"INSTABILITY\"  \n}\n\nIn this case a instability occurred on payment system of brazilian central bank or in the banks that we use or in target bank (bank of the user):\n\n{  \n\"withdrawCode\": \"3BKT9405J6\",  \n\"transactionCode\": null,  \n\"updateCode\": \"02\",  \n\"updateMessage\": \"RETURNED TRANSACTION\"  \n}\n\nIn this case the target bank (bank of the user) reject the transaction for any causes:\n\n{  \n\"withdrawCode\": \"3BKT9405J6\",  \n\"transactionCode\": null,  \n\"updateCode\": \"03\",  \n\"updateMessage\": \"REJECTED TRANSACTION\"  \n}\n\nIn this 3 cases, the transaction was DECLINED and balance must be reset to user.\n\n**Exemplo:**\n\nWithdraw completed:\n\n{  \n\"error\": false,  \n\"returnCode\": \"00\",  \n\"returnMessage\": \"Success\",  \n\"withdrawCode\": \"F5RNZ9YT3I\",  \n\"authenticationCode\": \"a63c0bd8-cd86-4240-8039-927d2b1ccd58\",  \n\"transactionCode\": \"E710278662023011402595500001213P\",  \n\"transaction\":{\n\n\"operationType\": \"PIX\",  \n\"transactionDate\":\"2023-01-13T23:59:54.667\",  \n\"completedDate\":\"2023-01-13T23:59:59.45\",  \n\"chargebackDate\":null,  \n\"paymentDate\":\"2023-01-13T23:59:59.45\"\n\n},  \n\"recipient\":{\n\n\"recipientName\":\"VANDERLENIR LOIOLA LIMA\",  \n\"recipientDocumentID\":\"01845023226\",  \n\"recipientBankAgency\":null,  \n\"recipientBankAccount\":\"-\",  \n\"recipientPIXKeyType\":\"Celular\",  \n\"recipientPIXKey\":\"+5596991526191\"\n\n},  \n\"requestDate\":\"2023-01-13T23:59:54.667\",  \n\"paymentDate\":\"2023-01-13T23:59:59.45\",  \n\"chargebackDate\":null,  \n\"completionDate\":\"2023-01-13T23:59:59.45\",  \n\"status\":\"Completed\"  \n}\n\nWithdraw received and waiting to send for banking:\n\n{  \n\"error\":false,  \n\"returnCode\":\"00\",  \n\"returnMessage\":\"Success\",  \n\"withdrawCode\":\"F5RNZ9YT3I\",  \n\"authenticationCode\":\"a63c0bd8-cd86-4240-8039-927d2b1ccd58\",  \n\"transactionCode\":\"E710278662023011402595500001213P\",  \n\"transaction\":{\n\n\"operationType\":\"PIX\",  \n\"transactionDate\":\"2023-01-13T23:59:54.667\",  \n\"completedDate\":null,  \n\"chargebackDate\":null,  \n\"paymentDate\":null\n\n},\n\n\"recipient\":{\n\n\"recipientName\":\"VANDERLENIR LOIOLA LIMA\",  \n\"recipientDocumentID\":\"01845023226\",  \n\"recipientBankAgency\":null,  \n\"recipientBankAccount\":\"-\",  \n\"recipientPIXKeyType\":\"Celular\",  \n\"recipientPIXKey\":\"+5596991526191\"\n\n}\n\n,  \n\"requestDate\":\"2023-01-13T23:59:54.667\",  \n\"paymentDate\":null,  \n\"chargebackDate\":null,  \n\"completionDate\":null,  \n\"status\":\"Received and Awaiting processing\"  \n}\n\nWithdraw sent to bank and awaiting confirmarion:\n\n{  \n\"error\":false,  \n\"returnCode\":\"00\",  \n\"returnMessage\":\"Success\",  \n\"withdrawCode\":\"F5RNZ9YT3I\",  \n\"authenticationCode\":\"a63c0bd8-cd86-4240-8039-927d2b1ccd58\",  \n\"transactionCode\":\"E710278662023011402595500001213P\",\n\n\"transaction\":{\n\n\"operationType\":\"PIX\",  \n\"transactionDate\":\"2023-01-13T23:59:54.667\",  \n\"completedDate\":null,  \n\"chargebackDate\":null,  \n\"paymentDate\":\"2023-01-13T23:59:59.45\"\n\n},\n\n\"recipient\":{\n\n\"recipientName\":\"VANDERLENIR LOIOLA LIMA\",  \n\"recipientDocumentID\":\"01845023226\",  \n\"recipientBankAgency\":null,  \n\"recipientBankAccount\":\"-\",  \n\"recipientPIXKeyType\":\"Celular\",  \n\"recipientPIXKey\":\"+5596991526191\"\n\n},  \n\"requestDate\":\"2023-01-13T23:59:54.667\",  \n\"paymentDate\":\"2023-01-13T23:59:59.45\",  \n\"chargebackDate\":null,  \n\"completionDate\":null,  \n\"status\":\"Paid and Waiting Confirmation\"  \n}\n\n#### Updates:\n\nThe x-request-id parameter was implemented in the callback.\n\nThis parameter will be used in callback control on successful operations.\n\nThe x-request-id parameter will be sent in the header of the callback function."
				}
			]
		},
		{
			"name": "Health",
			"item": [
				{
					"name": "HealthCheck",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASEURL}}/health/check",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"health",
								"check"
							]
						}
					},
					"response": []
				},
				{
					"name": "HealhPost",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ApplicationToken",
								"value": "{{APLICATIONTOKEN}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{AccessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASEURL}}/Health/Post?url=http%3A%2F%2Fapi.skilldigital.com.br",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"Health",
								"Post"
							],
							"query": [
								{
									"key": "url",
									"value": "http%3A%2F%2Fapi.skilldigital.com.br"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Provides routes for API health validation"
		},
		{
			"name": "BankSlip",
			"item": [
				{
					"name": "UpdateDueDate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var Atual = new Date()\r",
									"var customId = Number(Atual)\r",
									"pm.collectionVariables.set('CustomId', customId)\r",
									"\r",
									"//Checa se as variaveis obrigatorias estao preenchidas\r",
									"if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
									"    throw new Error('Usuario ou senha em branco')\r",
									"}\r",
									"if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
									"    throw new Error('ApplicationToken em branco')\r",
									"}\r",
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
									"    method: 'POST',\r",
									"    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        \"urlencoded\": [\r",
									"            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
									"            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
									"            { key: \"grant_type\", value: \"password\" }\r",
									"        ]\r",
									"    }\r",
									"    }, (err, res) => {\r",
									"        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
									"    })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "ApplicationToken",
								"value": "{{APLICATIONTOKEN}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{AccessToken}}",
								"type": "text"
							},
							{
								"key": "x-request-id",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"bankSlipOurNumber\": \"1\",\r\n  \"bankSlipYourNumber\": \"2\",\r\n  \"dueDate\": \"22/05/2023\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASEURL}}/BankSlip/UpdateDueDate",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"BankSlip",
								"UpdateDueDate"
							]
						},
						"description": "Update payment slip due date (BS2)"
					},
					"response": []
				}
			]
		},
		{
			"name": "Bitcoin",
			"item": [
				{
					"name": "Send",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var Atual = new Date()\r",
									"var customId = Number(Atual)\r",
									"pm.collectionVariables.set('CustomId', customId)\r",
									"\r",
									"//Checa se as variaveis obrigatorias estao preenchidas\r",
									"if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
									"    throw new Error('Usuario ou senha em branco')\r",
									"}\r",
									"if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
									"    throw new Error('ApplicationToken em branco')\r",
									"}\r",
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
									"    method: 'POST',\r",
									"    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        \"urlencoded\": [\r",
									"            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
									"            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
									"            { key: \"grant_type\", value: \"password\" }\r",
									"        ]\r",
									"    }\r",
									"    }, (err, res) => {\r",
									"        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
									"    })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "ApplicationToken",
								"value": "{{APLICATIONTOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASEURL}}/Bitcoin/Send",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"Bitcoin",
								"Send"
							]
						}
					},
					"response": []
				},
				{
					"name": "ValidateAddress",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var Atual = new Date()\r",
									"var customId = Number(Atual)\r",
									"pm.collectionVariables.set('CustomId', customId)\r",
									"\r",
									"//Checa se as variaveis obrigatorias estao preenchidas\r",
									"if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
									"    throw new Error('Usuario ou senha em branco')\r",
									"}\r",
									"if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
									"    throw new Error('ApplicationToken em branco')\r",
									"}\r",
									"pm.sendRequest({\r",
									"    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
									"    method: 'POST',\r",
									"    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
									"    body: {\r",
									"        mode: 'urlencoded',\r",
									"        \"urlencoded\": [\r",
									"            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
									"            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
									"            { key: \"grant_type\", value: \"password\" }\r",
									"        ]\r",
									"    }\r",
									"    }, (err, res) => {\r",
									"        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
									"    })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "ApplicationToken",
								"value": "{{APLICATIONTOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASEURL}}/Bitcoin/ValidateAddress?address=your-adress",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"Bitcoin",
								"ValidateAddress"
							],
							"query": [
								{
									"key": "address",
									"value": "your-adress"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Security Headers",
			"item": [],
			"description": "### 1.Goal\n\nThis manual aims to establish the Security Headers that must be implemented by default for WEB applications.\n\nThe OWASP Top 10 is a list of the top ten most critical security vulnerabilities in web applications, compiled by the Open Web Application Security Project (OWASP). This best practices guide focuses on HTTP headers to increase application security, considering the risks identified in the OWASP Top 10.\n\n### 2.Scope\n\nThis manual is applicable to all WEB applications in the Skill Digital Pay environment.\n\n### 3.Guidelines\n\nIn accordance with our Vulnerability Management process, we use the Tenable.io Web App Scanning tool, which is one of the leading tools for tracking scans.  \nTherefore, we used the HTTP Security Header Family plugin as a base to determine the criticality and necessity of implementing Security Headers.\n\n### 4.Security Headers and Mandatory Recommendations\n\nBased on criticality, the following Security Headers are mandatory:\n\n#### 4.1 HTTP Strict Transport Security HSTS\n\nThis header, for security reasons and compliance with scans, must include the value of max-age=31536000 ; includeSubDomains  \nMore information can be consulted on the reference pages below:\n\n[Missing HTTP Strict Transport Security Policy | Tenable® Permissive HTTP Strict Transport Security Policy Detected | Tenable®](https://www.tenable.com/plugins/was/98715)\n\n#### 4.2 Cross-Origin Resource Sharing CORS\n\nThis header, for security reasons and compliance with scans, must include the mapping of all domains that interact with the request, otherwise the scan points to an insecure configuration.\n\nMore information can be consulted on the reference pages below:\n\n[Insecure Cross-Origin Resource Sharing Configuration | Tenable® Insecure 'Access-Control-Allow-Origin' Header | Tenable®](https://www.tenable.com/plugins/was/98983)\n\n#### 4.3 Content Security Policy CSP\n\nThis header allows control over the resources the user agent is allowed to load for a given page, essential to prevent scripting attacks.  \nMore information can be consulted on the reference pages below:\n\n[Missing Content Security Policy | Tenable® Permissive Content Security Policy Detected | Tenable®  \nDeprecated Content Security Policy | Tenable®](https://www.tenable.com/plugins/was/112554)\n\n#### 4.4 Content-Type\n\nThis header allows clients to find the best way to render application data.  \nMore information can be consulted on the reference pages below:\n\n[Missing 'Content-Type' Header | Tenable®](https://www.tenable.com/plugins/was/98648)\n\n#### 4.5 Cache-Control\n\nThis header is used to specify directives for caching mechanisms. It is essential to use the correct directives based on the context of the page, in order to prevent sensitive information (such as passwords, credit cards and personal information) from being stored on the client side and, consequently, from being intercepted by unauthorized persons. authorized.  \nMore information can be consulted on the reference pages below:  \n[Missing 'Cache-Control' Header | Tenable®](https://www.tenable.com/plugins/was/112553)\n\n#### 4.6 X-Content-Type-Options\n\nThis header is a marker used by the server to indicate that the MIME types sent by the Content-Type headers should not be altered or followed.  \nMore information can be consulted on the reference pages below:  \n[X-Content-Type-Options - HTTP | MDN (mozilla.org)](https://developer.mozilla.org/pt-BR/docs/Web/HTTP/Headers/X-Content-Type-Options)\n\n#### 4.7 X-Frame-Options\n\nThis header is used to indicate whether or not the browser should render the page in a (en-US), , or (en-US). Sites can use this to prevent click-jacking attacks by ensuring that their content is not embedded on other sites.  \nMore information can be consulted on the reference pages below:  \n[Missing 'X-Frame-Options' Header | Tenable®](https://www.tenable.com/plugins/was/98060)\n\n#### 4.8 HTTP Header Information Disclosure\n\nThis information is not a specific header, but an information security recommendation to disable default headers that indicate server information, an attacker can use this information to take advantage of specific vulnerabilities.  \nMore information can be consulted on the reference pages below:  \n[HTTP Header Information Disclosure | Tenable®](https://www.tenable.com/plugins/was/98618)\n\n#### 4.9 HTTP user-Agent\n\nIn summary, the User-Agent header can provide useful information about the client accessing the application, but it should be treated with caution. Validate and sanitize User-Agent data and monitor logs for suspicious activity. Don't base security decisions solely on User-Agent and implement other comprehensive security practices to secure your application.  \nMore information can be consulted on the reference pages below:  \n[User-Agent Header (tenable.com)](https://developer.tenable.com/docs/user-agent-header)\n\n### 5\\. Revision\n\nThis standard is reviewed annually or as understood by the Information Security manager."
		},
		{
			"name": "Token",
			"item": [
				{
					"name": "Token",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "clientid",
									"value": "{{CLIENT-ID}}",
									"type": "text"
								},
								{
									"key": "clientsecret",
									"value": "{{CLIENT-SECRET}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{BASEURL}}/token",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"token"
							]
						},
						"description": "## Authentication\n\nIn order to have access to ALL API Methods, it is necessary to request a TOKEN that will be valid for 1h (one hour). To obtain this TOKEN, the user and password of each application created in the Digital MB Investimento panel will be used.\n\n**REQUEST :**\n\n| **Parameter** | **Description** |\n| --- | --- |\n| username | Obtained on the application registration screen on the panel |\n| password | Obtained on the application registration screen on the panel |\n| grant_type | fixed value |\n\n**RESPONSE :**\n\n| **Parameter** | **Description** |\n| --- | --- |\n| access_token | API Authentication Token |\n| token_type | Token type (Fixed: “bearer”) |\n| expires_in | token validity |\n\n**REQUEST IDENTIFICATION**\n\nAll API methods need to be identified and linked to a client application. For each application created in your panel, an “applicationtoken” is generated. This code must be sent in the header of each request, as well as the authentication token obtained as described above.\n\n| **Parameter** | **Description** |\n| --- | --- |\n| applicationtoken | Obtained on the application registration screen on the panel |"
					},
					"response": [
						{
							"name": "Token",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"name": "Content-Type",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "clientid",
											"value": "190626000001",
											"type": "text"
										},
										{
											"key": "clientsecret",
											"value": "21abd94c-d2a5-48ba-b38d-4a38752e8772",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://api.skilldigital.com.br/token",
									"protocol": "https",
									"host": [
										"api",
										"skilldigital",
										"com",
										"br"
									],
									"path": [
										"token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Content-Type",
									"value": "application/json;charset=UTF-8"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Server",
									"value": "Microsoft-IIS/10.0"
								},
								{
									"key": "X-Powered-By",
									"value": "ASP.NET"
								},
								{
									"key": "Date",
									"value": "Sun, 26 Mar 2023 13:33:10 GMT"
								},
								{
									"key": "Content-Length",
									"value": "294"
								}
							],
							"cookie": [],
							"body": "{\n    \"access_token\": \"EPMgRea0lIVFDOnP-Is2720XbnzsFAc8E8QZZHGMTUlZ6z122BRvZt61binC57qQarhp9JIka0xywBmn1DWlWLd1U85L0JeQDHuwmnB6GR9-NHE6-qq80V9sEBp0Ukvn1vfZiojeCeP51wb6gHT_E89DnBiqXheSzYKKiu5dvNPZyY_IFPL3u1-PyIgWb-YxZe6LO5vWtTQEpzCZ2WFUyrZaDtpb8aWdT854kUxlS4I\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 3599\n}"
						}
					]
				}
			],
			"description": "Provides routes for obtaining Access Tokens"
		},
		{
			"name": "FAQ",
			"request": {
				"method": "VIEW",
				"header": [],
				"url": {
					"raw": ""
				},
				"description": "| 1 - Could you provide your live URLs so I can add them in the code as well before continuing with live tests: |\n| --- |\n| Base url: [https://api.skilldigital.com.br](https://api.skilldigital.com.br2) |\n\n| 2 - For the PaymentPix request I see \"amount\": 504 - are those 504 centavos, which means it is 5.04BRL? |\n| --- |\n| Right. The amount property is Int type. |\n\n| 3 - For the confirmation/callback, you send 2 fields for the amount: \"total\": 504, \"totalPaid\": 504. What do they mean and why there are two fields? |\n| --- |\n| total is the amount of the invoice. |\n| totalPaid is the amount paid by the customer, different from the total in case of discount, interest or fees. |\n\n| 4 - What are the possible values for the \"status\" field for the confirmation/callback request? I see there is \"Paid\", but what are the rest? |\n| --- |\n| Paid, Canceled, Pending, Unknown |\n\n| 5 - What are the min and max amount limits for deposits |\n| --- |\n| No limits |\n\n| 6 - Could you provide the logic behind that \"digitalSignature\" property and how to generate it? |\n| --- |\n| Security digital signature for transactions involving balance is an extra layer of security to make sure your system is allowed to transfer. The electronic signature is created by encrypting the access_token (bearer token used to authenticate the API). The method used for encryption is HMAC-SHA256 and the key used must be the Security Token (obtained from the Security Token screen in the Integrations menu). In sandbox the Security Token is 8E765DB0-9C1C-44D0-85AB-8FD0B2E7D7CD. You can use the site [https://www.devglan.com/online-tools/hmac-sha256-online](https://www.devglan.com/online-tools/hmac-sha256-online) to encrypt your token. |\n\n| 6.1 - If \"confirmationUrl\" is the link at which you send us the callbacks, what the \"updateUrl\" property is used for? |\n| --- |\n| A POST will be sent in case of later updates with fields: WithdrawCode, UpdateCode, UpdateMessage; |\n| 1\\. WithdrawCode |\n| 2\\. UpdateCode |\n| a. 01 |\n| b. 02 |\n| c. 03 |\n| 3\\. UpdateMessage |\n| a. INSTABILITY (UpdateCode 01) |\n| b. RETURNED TRANSACTION (UpdateCode 02) |\n| c. REJECTED TRANSACTION (UpdateCode 03) |\n\n| 6.2 What \"idTipoChavePIX\" means? Is that a unique identification for the transaction provided by us? |\n| --- |\n| Is type of PIX Key |\n| 1\\. CPFCNPJ = 1 (brazilian document type – CPF = Person, CNPJ = Business), |\n| 2\\. TELEFONE = 2 (telephon), |\n| 3\\. EMAIL = 3 (email), |\n| 4\\. EVP = 4 (type aleatory) |\n\n| 6.3 - Does the \"returnMessage\": \"Success\" means that the money is successfully transferred to the given user? |\n| --- |\n| Right. But the Brazilian payment system is asynchronous so the target bank can reject the transaction for any reason. |\n\n| 6.4 - What the \"withdrawCode\" and \"authenticationCode\" are used for? Should I show them to the user? |\n| --- |\n| withdrawCode is the code generated by our system. Is unique for a withdraw and is a common code between your system and our system. |\n| authenticationCode is code generated by the Central Bank of Brasil. |\n\n| 6.5 **\\-** Should the properties \"cpfcnpj\" and \"chavePIX\" be the same as provided in the example? |\n| --- |\n| No. CPF is an identification document for Brazilians and CNPJ is an identification document for Brazilian companies. If the recipient is a person, you need to inform the CPF, if it is a company, you must inform the CNPJ. |\n| chavePIX is the key of customers who have to receive PIX. |\n\n| 6.6 - How I can put a confirmation on the transfer/withdrawal so I can view/test how the response will look? I do not see some specific ID like in the paymentPix |\n| --- |\n| {{baseurl}}/transfer/putconfirmation  <br>Here you get the simulation of PutConfirmation of withdraw request send digitalSinature and withdrawCode.  <br> |\n\n| 7- Can you please tell us where we can find the transaction statuses? |\n| --- |\n| Withdraw:  <br>01 - INSTABILITY  <br>02 - RETURNED TRANSACTION  <br>03 - REJECTED TRANSACTION  <br>Deposits:  <br>Pending  <br>Canceled  <br>Paid  <br>Overdue |\n\n| 8 - What statuses are final ( that will not change)? |\n| --- |\n| Deposit:  <br>Paid  <br>  <br>Withdraw:  <br>COMPLETED  <br>INSTABILITY RETURNED TRANSACTION REJECTED TRANSACTION |\n\n| What is PIX technology? |\n| --- |\n| PIX is an instant payment system created by the Central Bank of Brazil, officially launched in November 2020. It allows bank transfers to be carried out in real time, 24 hours a day, seven days a week, at no cost to individuals, and with low rates for companies.  <br>  <br>With PIX, it is possible to carry out transfers using only information such as CPF, CNPJ, email or cell phone of the recipient, making the process faster and more practical. In addition, PIX also allows payment for purchases in physical and virtual stores, withdrawals from commercial establishments and even payment of utility bills.  <br>  <br>The purpose of the PIX is to reduce the use of cash and increase the efficiency of the Brazilian financial system. It has been adopted by a large part of the population and has already become one of the most popular ways of transferring money in Brazil. |"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BASEURL",
			"value": "https://api.olimpopay.com.br"
		},
		{
			"key": "APLICATIONTOKEN",
			"value": "APP_TOKEN"
		},
		{
			"key": "CLIENT-ID",
			"value": "CLIENT-ID"
		},
		{
			"key": "CLIENT-SECRET",
			"value": "CLIENT-SECRET"
		},
		{
			"key": "CRP-TOKEN",
			"value": "CRP-TOKEN"
		},
		{
			"key": "AccessToken",
			"value": ""
		},
		{
			"key": "CustomId",
			"value": ""
		},
		{
			"key": "AssinaturaDigital",
			"value": ""
		}
	]
}