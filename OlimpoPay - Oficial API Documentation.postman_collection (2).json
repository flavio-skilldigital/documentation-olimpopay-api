{
  "info": {
    "_postman_id": "0d2b44cc-c7d8-4623-a54a-c2227107c611",
    "name": "OlimpoPay - Oficial API Documentation",
    "description": "Bem-vindo à API da OlimpoPay!\n\nAqui você encontra todas as informações necessárias para integrar sua aplicação com nossa API, permitindo depósitos e saques via Pix de forma segura e confiável.\n\n## Sumário das Funcionalidades\n\n### 1. Autenticação (Token)\nAntes de qualquer requisição, é necessário autenticar-se utilizando o endpoint de Token.\n- Gere o token de acesso via `/token` (POST).\n- Utilize o token no header `Authorization` das demais requisições.\n\n### 2. Cadastro de Cliente\n- **Pessoa Física:**\n  Endpoint: `/Customer/CreateCustomer` (POST)\n  Permite cadastrar um cliente do tipo pessoa física, informando dados pessoais, endereço e contato.\n\n- **Pessoa Jurídica:**\n  Endpoint: `/Customer/CreateCustomer` (POST)\n  Permite cadastrar um cliente do tipo pessoa jurídica, incluindo sócios, representante legal e dados da empresa.\n\n### 3. Consultas Financeiras\n- **Saldo em Reais:**\n  Endpoint: `/Financial/GetRealBalance` (GET)\n  Retorna o saldo disponível e a receber em reais.\n\n- **Saldo em Bitcoin:**\n  Endpoint: `/Financial/GetBitcoinBalance` (GET)\n  Retorna o saldo disponível em Bitcoin.\n\n- **Transferência Interna:**\n  Endpoint: `/transfer/realbalance` (POST)\n  Permite transferências internas entre clientes da plataforma.\n\n### 4. Faturamento (Invoice)\n- **Cancelar Fatura:**\n  Endpoint: `/Invoice/CancelInvoice` (GET)\n  Cancela uma cobrança existente.\n\n- **Consultar Fatura:**\n  Endpoint: `/Invoice/GetInvoice` (GET)\n  Retorna os dados de uma cobrança específica.\n\n- **Consultar Status:**\n  Endpoint: `/Invoice/getstatus` (GET)\n  Consulta o status de uma cobrança.\n\n- **Confirmar Pagamento:**\n  Endpoint: `/invoice/putconfirmation` (PUT)\n  Envia confirmação de pagamento para a URL informada na criação da cobrança.\n\n### 5. PIX\n\n#### Depósito via PIX\n- **Criar Cobrança PIX:**\n  Endpoint: `/payment/pix` (POST)\n  Cria uma cobrança para pagamento via PIX, retornando o código e QRCode.\n  Parâmetros importantes:\n  - `CustomId`: Identificador único da cobrança\n  - `amount`: Valor (em centavos, ex: 220 = R$2,20)\n  - `dueDate`: Data de vencimento\n  - `customer`: Dados do pagador\n  - `confirmationUrl`: URL para receber confirmação de pagamento via callback\n\n#### Saque via PIX\n- **Transferência PIX:**\n  Endpoint: `/transfer/pix` (POST)\n  Realiza transferência PIX para um favorecido.\n  Parâmetros importantes:\n  - `digitalSignature`: Assinatura digital\n  - `customId`: Identificador único da transação\n  - `amount`: Valor\n  - `favorecido`: Dados do recebedor (nome, CPF/CNPJ, chave PIX)\n  - `confirmationUrl` e `updateUrl`: URLs para callbacks de confirmação e atualização\n\n### 6. Tabela de Erros\nA documentação inclui uma tabela detalhada de códigos de erro, parâmetros, mensagens em PT-BR e EN-US.\nExemplo:\n- `001`: Parâmetros da requisição vazios\n- `002`: Token não pode ser vazio\n- `010`: CPF ou CNPJ vazio ou inválido\n- ... (consulte a tabela completa na documentação)\n\n### 7. Webhook (Callback)\n- Configure URLs de callback para receber notificações automáticas de status de depósitos e saques.\n- O parâmetro `x-request-id` pode ser utilizado para controle e rastreio das operações.\n\n### 8. Observações Gerais\n- Todos os valores monetários devem ser enviados em formato inteiro (centavos).\n- Em ambiente de produção, é obrigatório informar o IP para liberação no firewall.\n- O sistema utiliza criptografia HMAC-SHA256 para alguns parâmetros de segurança.\n\n---\n\n**Dicas de Uso:**\n- Padronize sempre os exemplos de requisição e resposta em português.\n- Utilize nomes de parâmetros e descrições consistentes.\n- Sempre destaque pré-requisitos (ex: autenticação) antes de cada operação.\n- Inclua exemplos de payloads e respostas para facilitar o entendimento.\n- Esclareça o uso de callbacks e tratamento de erros.\n",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "5720081",
    "_collection_link": "https://bancodi.postman.co/workspace/20654d68-78b4-441e-a998-e007d7a0ef7f/collection/5720081-0d2b44cc-c7d8-4623-a54a-c2227107c611?action=share&source=collection_link&creator=5720081"
  },
  "item": [
    {
      "name": "Cliente",
      "item": [
        {
          "name": "Criar Cliente - Pessoa Física",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var Atual = new Date()\r",
                  "var customId = Number(Atual)\r",
                  "pm.collectionVariables.set('CustomId', customId)\r",
                  "\r",
                  "//Checa se as variaveis obrigatorias estao preenchidas\r",
                  "if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
                  "    throw new Error('Usuario ou senha em branco')\r",
                  "}\r",
                  "if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
                  "    throw new Error('ApplicationToken em branco')\r",
                  "}\r",
                  "pm.sendRequest({\r",
                  "    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
                  "    method: 'POST',\r",
                  "    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
                  "    body: {\r",
                  "        mode: 'urlencoded',\r",
                  "        \"urlencoded\": [\r",
                  "            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
                  "            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
                  "            { key: \"grant_type\", value: \"password\" }\r",
                  "        ]\r",
                  "    }\r",
                  "    }, (err, res) => {\r",
                  "        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
                  "    })"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "ApplicationToken",
                "value": "{{APLICATIONTOKEN}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{AccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"sendNotificationsToOwner\": false,\r\n  \"typePerson\": 1,\r\n  \"legalPerson\": null,\r\n  \"naturalPerson\": {\r\n    \"documentNumber\": \"64509618727\",\r\n    \"name\": \"Anderson Caleb Breno Pinto\",\r\n    \"gender\": 2,\r\n    \"birthDate\": \"2001-08-20\"\r\n  },\r\n  \"address\": {\r\n    \"zipCode\": \"24230060\",\r\n    \"addressNumber\": \"220\"\r\n  },\r\n  \"contact\": {\r\n    \"email\": \"anderson.caleb.pinto@likaleal.com.br\",\r\n    \"phoneNumber\": \"21995535996\",\r\n    \"cellPhone\": \"21995535996\",\r\n    \"commercialPhone\": null\r\n  },\r\n  \"userAdmin\": {\r\n    \"name\": \"Anderson Caleb Breno Pinto\",\r\n    \"email\": \"anderson.caleb.pinto@likaleal.com.br\",\r\n    \"username\": \"apinto\",\r\n    \"password\": \"HikSzNULrR\"\r\n  },\r\n  \"defaultWebhook\": \"https://webhook.site/543dc354-639e-46cd-bb16-4d9c678810e0\",\r\n  \"createAPICredentials\": true\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{BASEURL}}/Customer/CreateCustomer",
              "host": ["{{BASEURL}}"],
              "path": ["Customer", "CreateCustomer"]
            }
          },
          "response": []
        },
        {
          "name": "Criar Cliente - Pessoa Jurídica",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var Atual = new Date()\r",
                  "var customId = Number(Atual)\r",
                  "pm.collectionVariables.set('CustomId', customId)\r",
                  "\r",
                  "//Checa se as variaveis obrigatorias estao preenchidas\r",
                  "if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
                  "    throw new Error('Usuario ou senha em branco')\r",
                  "}\r",
                  "if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
                  "    throw new Error('ApplicationToken em branco')\r",
                  "}\r",
                  "pm.sendRequest({\r",
                  "    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
                  "    method: 'POST',\r",
                  "    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
                  "    body: {\r",
                  "        mode: 'urlencoded',\r",
                  "        \"urlencoded\": [\r",
                  "            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
                  "            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
                  "            { key: \"grant_type\", value: \"password\" }\r",
                  "        ]\r",
                  "    }\r",
                  "    }, (err, res) => {\r",
                  "        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
                  "    })"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "ApplicationToken",
                "value": "{{APLICATIONTOKEN}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{AccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"sendNotificationsToOwner\": false,\r\n    \"typePerson\": \"2\",\r\n    \"legalPerson\": {\r\n        \"documentNumber\": \"14633018000135\",\r\n        \"name\": \"BUSINESS CENTER\",\r\n        \"companyName\": \"BUSINESS CENTER BRASIL LTDA\",\r\n        \"cnaeCode\": \"7020400\",\r\n        \"openDate\": \"2011-11-03\",\r\n        \"simpleNational\": false,\r\n        \"partners\": [\r\n            {\r\n                \"typePerson\": 1,\r\n                \"isLegalRepresentative\": true,\r\n                \"participation\": 100,\r\n                \"legalPerson\": \"\",\r\n                \"naturalPerson\": {\r\n                    \"documentNumber\": \"13359573838\",\r\n                    \"name\": \"Milton Carvalho lopez\",\r\n                    \"gender\": 2,\r\n                    \"birthDate\": \"1970-08-22\",\r\n                    \"idMaritalStatus\": 0\r\n                },\r\n                \"address\": {\r\n                    \"zipCode\": \"11010090\",\r\n                    \"addressNumber\": \"104\",\r\n                    \"address2\": \"Rua Frei Gaspar\",\r\n                    \"address\": \"Rua Frei Gaspar\",\r\n                    \"state\": \"SP\",\r\n                    \"city\": \"Santos\",\r\n                    \"neighborhood\": \"Centro\"\r\n                },\r\n                \"contact\": {\r\n                    \"email\": \"jiy701382@gmail.com\",\r\n                    \"phoneNumber\": \"+5511977655555\",\r\n                    \"cellPhone\": \"+5511977655555\",\r\n                    \"commercialPhone\": \"\"\r\n                }\r\n            }\r\n        ]\r\n    },\r\n    \"address\": {\r\n        \"zipCode\": \"11010090\",\r\n        \"addressNumber\": \"104\",\r\n        \"address2\": \"Rua Frei Gaspar\",\r\n        \"address\": \"Rua Frei Gaspar\",\r\n        \"state\": \"SP\",\r\n        \"city\": \"Santos\",\r\n        \"neighborhood\": \"Centro\"\r\n    },\r\n    \"contact\": {\r\n        \"email\": \"jiy701382@gmail.com\",\r\n        \"phoneNumber\": \"+5511977655555\",\r\n        \"cellPhone\": \"+5511977655555\",\r\n        \"commercialPhone\": \"\"\r\n    },\r\n    \"userAdmin\": {\r\n        \"name\": \"BUSINESS CENTER BRASIL LTDA\",\r\n        \"email\": \"jiy701382@gmail.com\",\r\n        \"username\": \"BUSINESS CENTER BRASIL LTDA\",\r\n        \"password\": \"123456\"\r\n    },\r\n    \"defaultWebhook\": \"\",\r\n    \"createAPICredentials\": true\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{BASEURL}}/Customer/CreateCustomer",
              "host": ["{{BASEURL}}"],
              "path": ["Customer", "CreateCustomer"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Tabela de Erros",
      "item": [],
      "description": "| Code | Parameter | PT_BR error | EN_US Error |\n| --- | --- | --- | --- |\n| 001 | Any | Parâmetros da requisição vazios | Empty request parameters |\n| 002 | token | Não pode ser vazio | Can't be empty |\n| 003 | applicationToken | Não pode ser vazio | Can't be empty |\n| 004 | applicationToken | Acesso não autorizado ao “ApplicationToken” | Unauthorized access to “ApplicationToken” |\n| 005 | token | Acesso não autorizado ao “token” | Unauthorized access to the “token” |\n| 006 | passInterestToCustomer | Repassar juros ao cliente não definido | Pass interest to undefined customer |\n| 007 | passRateToCustomer | Repassar multa ao cliente não definido | Pass fine to undefined customer |\n| 008 | passFeeToCustomer | Repassar taxas ao cliente não definido | Pass fees to undefined customer |\n| 09 | customer | Customer vazio | Empty customer |\n| 010 | customer.cpfCnpj | CPF ou CNPJ vazio, ou número informado é inválido | CPF or CNPJ empty, or the number informed is invalid |\n| 011 | customer.email | Email vazio | Empty email |\n| 012 | maximumPaymentDate | Data inválida | Invalid date |\n| 013 | cardNumber | Não pode ser vazio (Em caso de transação por cartão de crédito) | Cannot be empty (In case of credit card transaction) |\n| 014 | securityCode | Não pode ser vazio (Em caso de transação por cartão de crédito) | Cannot be empty (In case of credit card transaction) |\n| 015 | securityCode | Valor informado inválido (Em caso de transação por cartão de crédito) | Invalid value entered (In case of credit card transaction) |\n| 016 | cardNumber | Valor informado inválido (Em caso de transação por cartão de crédito) | Invalid value entered (In case of credit card transaction) |\n| 017 | expirationMonth | Não pode ser vazio (Em caso de transação por cartão de crédito) | Cannot be empty (In case of credit card transaction) |\n| 018 | expirationYear | Não pode ser vazio (Em caso de transação por cartão de crédito) | Cannot be empty (In case of credit card transaction) |\n| 019 | installments | Mínimo 1 e máximo 12 (Em caso de transação por cartão de crédito) | Minimum 1 and maximum 12 (In case of credit card transaction) |\n| 020 | amount / items | Parcela mínima R$ 5,00 (Em caso de transação por cartão de crédito) | Minimum installment R$ 5.00 (In case of credit card transaction) |\n| 021 | customer.name | Name vazio | empty name |\n| 022 | amount | “Amount” deve ser informado ou ser enviados itens no parâmetro “Items” | “Amount” must be informed or items must be sent in the “Items” parameter |\n| 023 | recurrence | Não se aplica para esta solicitação (Em caso de recorrência) | Not applicable for this request (In case of recurrence) |\n| 024 | freeTrialPeriod | Não se aplica para esta solicitação (Em caso de recorrência) | Not applicable for this request (In case of recurrence) |\n| 025 | installments | Parcelas não são permitidas na recorrência (Em caso de recorrência) | Installments are not allowed on recurrence (In case of recurrence) |\n| 026 | recurrenceType | Não definida (Em caso de recorrência) | Not defined (In case of recurrence) |\n| 027 | dateEndingRecurrence | Não definida (Em caso de recorrência) | Not defined (In case of recurrence) |\n| 028 | passInterestToCustomer | Não definido (Em caso de recorrência) | Not defined (In case of recurrence) |\n| 029 | passRateToCustomer | Não definido (Em caso de recorrência) | Not defined (In case of recurrence) |\n| 030 | passFeeToCustomer | Não definido (Em caso de recorrência) | Not defined (In case of recurrence) |\n| 031 | freeTrialPeriodo | Valor informado não corresponde ao período (Em caso de recorrência) | Entered value does not correspond to the period (In case of recurrence) |\n| 032 | promotionalPeriod | Valor informado não corresponde ao período (Em caso de recorrência) | Entered value does not correspond to the period (In case of recurrence) |\n| 033 | receiver.name | Deve ser informado (Em caso de split) | Must be informed (In case of split) |\n| 034 | receiver.bankNumber | Deve ser informado (Em caso de split) | Must be informed (In case of split) |\n| 035 | receiver.bankNumer | Valor informado inválido (Em caso de split) | Invalid informed value (In case of split) |\n| 036 | receiver.bankBranch | Deve ser informado (Em caso de split) | Must be informed (In case of split) |\n| 037 | receiver.bankAccountType | Deve ser informado (Em caso de split) | must be informed (In case of split) |\n| 038 | receiver.bankAccountType | Valor informado inválido (Em caso de split) | Invalid informed value (In case of split |\n| 039 | receiver.checkingAccount | Deve ser informado (Em caso de split) | Must be informed (In case of split) |\n| 040 | receiver.comissionValue | Deve ser informado (Em caso de split) | Must be informed (In case of split) |\n| 041 | receiver.commissionType | Deve ser informado (Em caso de split) | Must be informed (In case of split) |\n| 042 | receiver.commissionType | Valor informado inválido (Em caso de split) | Invalid informed value (In case of split) |\n| 043 | duedate | Data vencimento não informada | Due date not informed |\n| 044 | duedate | Data vencimento inválida | Invalid expiration date |\n| 045 | duedate | Data vencimento maior que “maximumPaymentDate” | Due date greater than “maximumPaymentDate” |\n| 046 | customID | Deve ser informado | must be informed |\n| 047 | amount | Deve ser informado | must be informed |\n| 048 | \\- | Conta bloqueada ou cancelada | Account blocked or canceled |\n| 049 | \\- | Conta com documentação não aprovada (Para recebimento em Criptomoeda não há necessidade de validação prévia) | Account with unapproved documentation (For receipt in Cryptocurrency there is no need for prior validation) |\n| 050 | \\- | Condições comerciais ainda não configuradas para a forma de pagamento | Commercial conditions not yet configured for the payment method |\n| 051 | \\- | Cartão crédito vencido | expired credit card |\n| 052 | \\- | Chaves de autenticação não autorizada pela equipe comercial | Authentication keys not authorized by the commercial team |\n| 053 | id | Id da cobrança não informado ou inválido (O mesmo retornado na criação da cobrança) | Charge id not informed or invalid (The same as returned when creating the charge) |\n| 054 | tid | TID da transação não informado ou inválido (O mesmo retornado na autorização do cartão) | Transaction TID not informed or invalid (The same as returned in the card authorization) |\n| 055 | \\- | Transação já capturada | Transaction already captured |\n| 056 | \\- | Erro ao gravar token de cartão de crédito | Error writing credit card token |\n| 057 | \\- | Erro ao gerar token na bandeira do cartão de crédito | Error generating token in credit card flag |\n| 058 | typePerson | Tipo de pessoa inválido (1 = Pessoa Física e 2 = Pessoa Jurídica) | Invalid type of person (1 = Individual and 2 = Legal Entity) |\n| 059 | documentType | Tipo de documento inválido (1 = CPF e 2 = CNPJ) | Invalid document type (1 = CPF and 2 = CNPJ) |\n| 060 | \\- | Se TypePerson for igual a 1 (Pessoa Física) o DocumentType também precisa ser 1 (CPF) | If TypePerson is equal to 1 (Individual) the DocumentType must also be 1 (CPF) |\n| 061 | \\- | Se TypePerson for igual a 2 (Pessoa Jurídica) o DocumentType também precisa ser 2 (CNPJ) | If TypePerson is equal to 2 (Legal Entity) the DocumentType must also be 2 (CNPJ) |\n| 062 | documentNumber | CPF ou CNPJ vazio, ou número informado é inválido | CPF or CNPJ empty, or the number informed is invalid |\n| 063 | email | E-mail não pode estar vazio | Email cannot be empty |\n| 064 | name | Name não pode estar vazio (Informe o nome fantasia em caso de PJ) | Name cannot be empty (Insert the fantasy name in case of PJ) |\n| 065 | address | Address não pode estar vazio | Address cannot be empty |\n| 066 | zipCode | ZipCode não pode estar vazio | ZipCode cannot be empty |\n| 067 | cellPhone | CellPhone não pode estar vazio | CellPhone cannot be empty |\n| 068 | birthDate | BirthDate não pode estar vazio para cadastro pessoa física | BirthDate cannot be empty for individual registration |\n| 069 | \\- | Se TypePerson = 1 (Pessoa Física) DocumentNumber deve conter o CPF com 11 dígitos | If TypePerson = 1 (Individual) DocumentNumber must contain the CPF with 11 digits |\n| 070 | \\- | Se TypePerson = 2 (Pessoa Jurídica) DocumentNumber deve conter o CNPJ com 14 dígitos | If TypePerson = 2 (Legal Entity) DocumentNumber must contain the CNPJ with 14 digits |\n| 071 | documentNumber | Documento já cadastrado na base de dados | Document already registered in the database |\n| 072 | email | E-mail já cadastrado na base de dados | Email already registered in the database |\n| 073 | email | E-mail já cadastrado como um login de acesso de outro usuário | Email already registered as a login for another user |\n| 074 | name | Nome inválido | Invalid name |\n| 075 | name | Informe o nome completo do cliente | Enter the customer's full name |\n| 076 | state | State não pode estar vazio | State cannot be empty |\n| 077 | state | State inválido ou não contém uma sigla válida | Invalid state or does not contain a valid acronym |\n| 078 | city | City não pode estar vazio | City cannot be empty |\n| 079 | city | City inválido para o State(UF) informado | Invalid City for the State(UF) informed |\n| 080 | companyName | CompanyName não pode estar vazio para cadastro pessoa jurídica | CompanyName cannot be empty for legal entity registration |\n| 081 | gender | 1 = Sexo feminino e 2 = sexo masculino | 1 = female and 2 = male |\n| 082 | birthDate | Idade precisa ser maior que 18 anos para pessoa física | Age must be over 18 for individuals |\n| 083 | zipCode | Zipcode inválido | Invalid zipcode |\n| 084 | \\- | Cobrança não pode ser cancelada pois está paga | Billing cannot be canceled as it has been paid |\n| 084 | \\- | Cobrança já foi cancelada em DD/MM/AAAA | Billing has already been canceled in DD/MM/YYYY |\n| 085 | \\- | Não é possível enviar confirmação de pagamento em ambiente de produção se a cobrança ainda não está paga | It is not possible to send payment confirmation in production environment if the charge is not yet paid |\n| 086 | confirmationUrl | URL de confirmação de cobrança vazia ou inválida | Empty or invalid billing confirmation URL |\n| 087 | transfers | O parâmetro Transfer não podem estar vazios | The Transfer parameter cannot be empty |\n| 088 | transfers | O parâmetro Transfer deve conter o Nickname ou DocumentNumber preenchido | The Transfer parameter must contain the Nickname or DocumentNumber filled in |\n| 089 | digitalSignature | Assinatura digital deve ser informada | Digital signature must be informed |\n| 090 | digitalSignature | Assinatura digital inválida | Invalid digital signature |\n| 091 | \\- | Nenhum token de criptografia foi gerado pelo cliente no painel | No encryption token was generated by the customer in the dashboard |\n| 092 | \\- | Saldo insuficiente para transferência | Insufficient balance for transfer |\n| 093 | \\- | Cliente destino não encontrado | Destination client not found |\n| 094 | \\- | Erro ao cadastrar transferência | Error registering transfer |\n| 095 | \\- | Informe apenas um dos parâmetros. Ou o CPFCNPJ ou Nickname | Enter only one of the parameters. CPFCNPJ or Nickname |\n| 096 | \\- | Conta ainda não aprovada na Digital MB Investimento | Account not yet approved |\n| 097 | \\- | Conta bloqueada na Digital MB Investimento | Account blocked |\n| 098 | \\- | Um ou mais pagamentos estão abaixo do valor mínimo de transferência que é de {0} | One or more payments are below the minimum transfer amount which is {0} |\n| 099 | \\- | Um ou mais pagamentos estão sem endereço informado | One or more payments are without an address provided |\n| 100 | addressTo | Endereço Bitcoin inválido | Invalid Bitcoin address |\n| 101 | installments | Informe ao menos 2 parcelas do carnê | Inform at least 2 installments of the booklet |\n| 102 | \\- | Informe as datas de vencimento de todas as parcelas do carnê | Inform the due dates of all installments of the booklet |\n| 103 | \\- | As datas de vencimento das parcelas do carnê precisam ser maior que a data atual | The due dates installments must be greater than the current date |\n| 104 | installmentNumber | Não pode haver número repetido nas parcelas | Repeated number in the plots |\n| 105 | customId | Não pode haver CustomId repetido nas parcelas | Repeated number in the plots |\n| 106 | dueDate | DueDate não pode ser menor ou igual a data atual | DueDate cannot be less than or equal to the current date |\n| 107 | bankslip | Boleto não encontrado | ticket not found |\n| 108 | bankslip.dueDate | Boleto vencido expirou o prazo de atualização. | Expired ticket expired. |\n| 109 | bankslip.dueDate | Não é possível alterar um boleto mais de uma vez na mesma data. | It is not possible to change a ticket more than once on the same date. |\n| 110 | bankslip | Não foi possível alterar o boleto no sistema do BACEN. | It was not possible to change the ticket in the BACEN system. |\n| 111 | pix | Não foi possível encontrar a chave PIX. | Could not find PIX key. |\n| 112 | pix | Transferência não enviada. Entre em contato com nosso suporte e informe a mensagem: {MENSAGEM PERSONALIZADA} | Transfer not sent. Contact our support and let us know the message: {CUSTOM MESSAGE} |\n| 113 | pix | Ocorreu um erro ao salvar solicitação. Informe imediatamente ao suporte. | An error occurred while saving request. Notify support immediately. |\n| 114 | pix | Não é possível enviar PIX por sua conta. Entre em contato com o setor de compliance para entender o motivo. | It is not possible to send PIX on your own. Contact the compliance department to understand why. |\n| 115 | pix | Cliente ainda não possui conta aberta no banco. | Customer does not have an open bank account yet. |\n| 116 | pix | A conta principal está inativa ou encerrada. | The main account is inactive or closed. |\n| 117 | pix | Informe o nome completo do favorecido | Enter the beneficiary's full name |\n| 118 | pix | Informe o CPF ou CNPJ do favorecido | Inform the beneficiary's CPF or CNPJ |\n| 119 | pix | Informe o tipo de chave PIX do favorecido | Inform the beneficiary's PIX key type |\n| 120 | pix | Informe a chave PIX do favorecido | Inform the beneficiary's PIX key |\n| 121 | pix | Ocorreu um erro ao salvar o conta bancária do favorecido | There was an error saving the payee's bank account |\n| 122 | pix | Ocorreu um erro ao salvar o favorecido | There was an error saving the payee |\n| 123 | pix | URL de confirmação de saque vazia ou inválida | Empty or invalid withdrawal confirmation URL |\n| 124 | pix | URL de atualização de saque vazia ou inválida | Empty or invalid Cashout Update URL |\n| 125 | pix | Não é possível enviar confirmação de conclusão de saque em ambiente de produção se o saque ainda não está confirmado pelo BACEN | It is not possible to send confirmation of withdrawal completion in a production environment if the withdrawal has not yet been confirmed by BACEN |\n| 126 | pix | Cliente ainda não possui conta aberta no banco | Customer does not have an open bank account yet |\n| 127 | pix | Cliente não possui chave cadastrada na sua conta principal | Customer does not have a key registered in his main account |\n| 128 | pix | Conta principal inativa ou encerrada | Master account inactive or closed |\n| 129 | pix | Conta não reconhecida como uma conta do favorecido | Account not recognized as a payee account |\n| 130 | pix | Chave PIX inválida | Invalid PIX key |\n| 131 | pix | Chave PIX de outro titular | Other holder's PIX key |\n| 132 | pix | Erro ao processar o pagamento do PIX no BACEN | Error processing PIX payment at BACEN |\n| 133 | transfer | Não possui permissão para acessar esta transferência | You don't have permission to access this transfer |\n| 134 | pix | Chave PIX inválida no BACEN. Verifique uma nova chave PIX com o destinatário | Invalid PIX key at BACEN. Verify a new PIX key with the recipient |\n| 135 | transfer | Chave PIX não corresponde ao padrão informado ({TIPO_ENVIADO_NA_REQUISICAO}). Tipos permitidos CPF, CNPJ, EMAIL, EVP ou CELULAR. | PIX key does not match the informed pattern ({TYPE_SENT_IN_REQUEST}). Allowed types CPF, CNPJ, EMAIL, EVP, or CELLULAR. |\n| 136 | transfer | O favorecido não foi informado | Beneficiary was not informed |\n| 137 | transfer | Chave PIX do favorecido não informado | Uninformed payee's PIX key |\n| 138 | transfer | Nenhum banco disponível para pagamento. Entre em contato imediatamente com o suporte. | No bank is available for payment. Please contact support immediately. |"
    },
    {
      "name": "Financeiro",
      "item": [
        {
          "name": "Consultar Saldo em Reais",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var Atual = new Date()\r",
                  "var customId = Number(Atual)\r",
                  "pm.collectionVariables.set('CustomId', customId)\r",
                  "\r",
                  "//Checa se as variaveis obrigatorias estao preenchidas\r",
                  "if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
                  "    throw new Error('Usuario ou senha em branco')\r",
                  "}\r",
                  "if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
                  "    throw new Error('ApplicationToken em branco')\r",
                  "}\r",
                  "pm.sendRequest({\r",
                  "    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
                  "    method: 'POST',\r",
                  "    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
                  "    body: {\r",
                  "        mode: 'urlencoded',\r",
                  "        \"urlencoded\": [\r",
                  "            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
                  "            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
                  "            { key: \"grant_type\", value: \"password\" }\r",
                  "        ]\r",
                  "    }\r",
                  "    }, (err, res) => {\r",
                  "        var signBytes = CryptoJS.HmacSHA256(res.json().access_token, pm.collectionVariables.get('CRP-TOKEN'));\r",
                  "        var signHex = CryptoJS.enc.Hex.stringify(signBytes);\r",
                  "        pm.collectionVariables.set('AssinaturaDigital', signHex);\r",
                  "        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
                  "    })"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "ApplicationToken",
                "value": "{{APLICATIONTOKEN}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"digitalSignature\": \"{{AssinaturaDigital}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{BASEURL}}/Financial/GetRealBalance",
              "host": ["{{BASEURL}}"],
              "path": ["Financial", "GetRealBalance"]
            },
            "description": "Para utilizar este endpoint, siga as regras abaixo:\n1 - Autentique-se na API da mesma forma que para outros métodos.\n2 - Envie o parâmetro ApplicationToken no Header.\n3 - O corpo da requisição deve estar no formato \"application/json\".\n4 - O corpo deve conter apenas o parâmetro \"digitalSignature\", que deve ser gerado conforme as regras de criptografia descritas na documentação (mesma assinatura digital do método Transfer/Pix).\n\nExemplo de resposta:\n\n{\n  \"saldoDisponivel\": 88137574,\n  \"saldoAReceber\": 0,\n  \"codigo\": \"BRL\",\n  \"moeda\": \"Real\",\n  \"simbolo\": \"R$\",\n  \"error\": false,\n  \"returnCode\": \"00\",\n  \"returnMessage\": \"Success\"\n}"
          },
          "response": []
        },
        {
          "name": "Consultar Saldo em Bitcoin",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var Atual = new Date()\r",
                  "var customId = Number(Atual)\r",
                  "pm.collectionVariables.set('CustomId', customId)\r",
                  "\r",
                  "//Checa se as variaveis obrigatorias estao preenchidas\r",
                  "if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
                  "    throw new Error('Usuario ou senha em branco')\r",
                  "}\r",
                  "if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
                  "    throw new Error('ApplicationToken em branco')\r",
                  "}\r",
                  "pm.sendRequest({\r",
                  "    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
                  "    method: 'POST',\r",
                  "    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
                  "    body: {\r",
                  "        mode: 'urlencoded',\r",
                  "        \"urlencoded\": [\r",
                  "            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
                  "            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
                  "            { key: \"grant_type\", value: \"password\" }\r",
                  "        ]\r",
                  "    }\r",
                  "    }, (err, res) => {\r",
                  "        var signBytes = CryptoJS.HmacSHA256(res.json().access_token, pm.collectionVariables.get('CRP-TOKEN'));\r",
                  "        var signHex = CryptoJS.enc.Hex.stringify(signBytes);\r",
                  "        pm.collectionVariables.set('AssinaturaDigital', signHex);\r",
                  "        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
                  "    })"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "ApplicationToken",
                "value": "{{APLICATIONTOKEN}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"digitalSignature\": \"{{AssinaturaDigital}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{BASEURL}}/Financial/GetBitcoinBalance?ApplicationToken&Authorization",
              "host": ["{{BASEURL}}"],
              "path": ["Financial", "GetBitcoinBalance"],
              "query": [
                {
                  "key": "ApplicationToken",
                  "value": null
                },
                {
                  "key": "Authorization",
                  "value": null
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Transferência Interna",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var Atual = new Date()\r",
                  "var customId = Number(Atual)\r",
                  "pm.collectionVariables.set('CustomId', customId)\r",
                  "\r",
                  "//Checa se as variaveis obrigatorias estao preenchidas\r",
                  "if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
                  "    throw new Error('Usuario ou senha em branco')\r",
                  "}\r",
                  "if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
                  "    throw new Error('ApplicationToken em branco')\r",
                  "}\r",
                  "pm.sendRequest({\r",
                  "    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
                  "    method: 'POST',\r",
                  "    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
                  "    body: {\r",
                  "        mode: 'urlencoded',\r",
                  "        \"urlencoded\": [\r",
                  "            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
                  "            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
                  "            { key: \"grant_type\", value: \"password\" }\r",
                  "        ]\r",
                  "    }\r",
                  "    }, (err, res) => {\r",
                  "        var signBytes = CryptoJS.HmacSHA256(res.json().access_token, pm.collectionVariables.get('CRP-TOKEN'));\r",
                  "        var signHex = CryptoJS.enc.Hex.stringify(signBytes);\r",
                  "        pm.collectionVariables.set('AssinaturaDigital', signHex);\r",
                  "        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
                  "    })"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "ApplicationToken",
                "value": "{{APLICATIONTOKEN}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{AccessToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"transfer\": {\r\n    \"nickname\": \"ysilvadr\",\r\n    \"documentNumber\": \"string\",\r\n    \"amount\": 1\r\n  },\r\n  \"digitalSignature\": \"{{AssinaturaDigital}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{BASEURL}}/transfer/realbalance",
              "host": ["{{BASEURL}}"],
              "path": ["transfer", "realbalance"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Fatura",
      "item": [
        {
          "name": "Cancelar Fatura",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var Atual = new Date()\r",
                  "var customId = Number(Atual)\r",
                  "pm.collectionVariables.set('CustomId', customId)\r",
                  "\r",
                  "//Checa se as variaveis obrigatorias estao preenchidas\r",
                  "if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
                  "    throw new Error('Usuario ou senha em branco')\r",
                  "}\r",
                  "if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
                  "    throw new Error('ApplicationToken em branco')\r",
                  "}\r",
                  "pm.sendRequest({\r",
                  "    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
                  "    method: 'POST',\r",
                  "    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
                  "    body: {\r",
                  "        mode: 'urlencoded',\r",
                  "        \"urlencoded\": [\r",
                  "            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
                  "            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
                  "            { key: \"grant_type\", value: \"password\" }\r",
                  "        ]\r",
                  "    }\r",
                  "    }, (err, res) => {\r",
                  "        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
                  "    })"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "ApplicationToken",
                "value": "{{APLICATIONTOKEN}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{BASEURL}}/Invoice/CancelInvoice?Id=1",
              "host": ["{{BASEURL}}"],
              "path": ["Invoice", "CancelInvoice"],
              "query": [
                {
                  "key": "Id",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Consultar Fatura",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var Atual = new Date()\r",
                  "var customId = Number(Atual)\r",
                  "pm.collectionVariables.set('CustomId', customId)\r",
                  "\r",
                  "//Checa se as variaveis obrigatorias estao preenchidas\r",
                  "if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
                  "    throw new Error('Usuario ou senha em branco')\r",
                  "}\r",
                  "if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
                  "    throw new Error('ApplicationToken em branco')\r",
                  "}\r",
                  "pm.sendRequest({\r",
                  "    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
                  "    method: 'POST',\r",
                  "    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
                  "    body: {\r",
                  "        mode: 'urlencoded',\r",
                  "        \"urlencoded\": [\r",
                  "            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
                  "            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
                  "            { key: \"grant_type\", value: \"password\" }\r",
                  "        ]\r",
                  "    }\r",
                  "    }, (err, res) => {\r",
                  "        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
                  "    })"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "ApplicationToken",
                "value": "{{APLICATIONTOKEN}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{AccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{BASEURL}}/Invoice/GetInvoice?Id=0632add4-898f-4aa9-8e51-99c1f2b8e579",
              "host": ["{{BASEURL}}"],
              "path": ["Invoice", "GetInvoice"],
              "query": [
                {
                  "key": "Id",
                  "value": "0632add4-898f-4aa9-8e51-99c1f2b8e579"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Consultar Status da Fatura",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var Atual = new Date()\r",
                  "var customId = Number(Atual)\r",
                  "pm.collectionVariables.set('CustomId', customId)\r",
                  "\r",
                  "//Checa se as variaveis obrigatorias estao preenchidas\r",
                  "if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
                  "    throw new Error('Usuario ou senha em branco')\r",
                  "}\r",
                  "if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
                  "    throw new Error('ApplicationToken em branco')\r",
                  "}\r",
                  "pm.sendRequest({\r",
                  "    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
                  "    method: 'POST',\r",
                  "    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
                  "    body: {\r",
                  "        mode: 'urlencoded',\r",
                  "        \"urlencoded\": [\r",
                  "            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
                  "            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
                  "            { key: \"grant_type\", value: \"password\" }\r",
                  "        ]\r",
                  "    }\r",
                  "    }, (err, res) => {\r",
                  "        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
                  "    })"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "ApplicationToken",
                "value": "{{APLICATIONTOKEN}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{AccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{BASEURL}}/Invoice/getstatus?Id=0632add4-898f-4aa9-8e51-99c1f2b8e579",
              "host": ["{{BASEURL}}"],
              "path": ["Invoice", "getstatus"],
              "query": [
                {
                  "key": "Id",
                  "value": "0632add4-898f-4aa9-8e51-99c1f2b8e579"
                }
              ]
            },
            "description": "Requisição:\n\nHeaders:\n\n- ApplicationToken\n- Authorization"
          },
          "response": [
            {
              "name": "GetStatus",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "ApplicationToken",
                    "value": "{{APLICATIONTOKEN}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "{{AccessToken}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{BASEURL}}/Invoice/getstatus?Id=0632add4-898f-4aa9-8e51-99c1f2b8e579",
                  "host": ["{{BASEURL}}"],
                  "path": ["Invoice", "getstatus"],
                  "query": [
                    {
                      "key": "Id",
                      "value": "0632add4-898f-4aa9-8e51-99c1f2b8e579"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Length",
                  "value": "225"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "key": "Expires",
                  "value": "Sun, 02 Jul 2023 19:27:51 GMT"
                },
                {
                  "key": "Cache-Control",
                  "value": "max-age=0, no-cache, no-store"
                },
                {
                  "key": "Pragma",
                  "value": "no-cache"
                },
                {
                  "key": "Date",
                  "value": "Sun, 02 Jul 2023 19:27:51 GMT"
                },
                {
                  "key": "Connection",
                  "value": "keep-alive"
                }
              ],
              "cookie": [],
              "body": "{\n    \"status\": \"Pending\",\n    \"paymentDate\": null,\n    \"dueDate\": \"30/12/2023\",\n    \"cancelDate\": null,\n    \"id\": \"0632add4-898f-4aa9-8e51-99c1f2b8e579\",\n    \"currency\": \"\",\n    \"total\": 1,\n    \"totalPaid\": 0,\n    \"error\": false,\n    \"returnCode\": \"00\",\n    \"returnMessage\": \"Success\"\n}"
            }
          ]
        },
        {
          "name": "Consultar Status por ID",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var Atual = new Date()\r",
                  "var customId = Number(Atual)\r",
                  "pm.collectionVariables.set('CustomId', customId)\r",
                  "\r",
                  "//Checa se as variaveis obrigatorias estao preenchidas\r",
                  "if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
                  "    throw new Error('Usuario ou senha em branco')\r",
                  "}\r",
                  "if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
                  "    throw new Error('ApplicationToken em branco')\r",
                  "}\r",
                  "pm.sendRequest({\r",
                  "    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
                  "    method: 'POST',\r",
                  "    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
                  "    body: {\r",
                  "        mode: 'urlencoded',\r",
                  "        \"urlencoded\": [\r",
                  "            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
                  "            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
                  "            { key: \"grant_type\", value: \"password\" }\r",
                  "        ]\r",
                  "    }\r",
                  "    }, (err, res) => {\r",
                  "        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
                  "    })"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "ApplicationToken",
                "value": "{{APLICATIONTOKEN}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{AccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{BASEURL}}/Invoice/GetStatus/2?Id=0632add4-898f-4aa9-8e51-99c1f2b8e579",
              "host": ["{{BASEURL}}"],
              "path": ["Invoice", "GetStatus", "2"],
              "query": [
                {
                  "key": "Id",
                  "value": "0632add4-898f-4aa9-8e51-99c1f2b8e579"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "PIX",
      "item": [
        {
          "name": "Depósito",
          "item": [
            {
              "name": "Pagamento PIX",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var Atual = new Date()\r",
                      "var customId = Number(Atual)\r",
                      "pm.collectionVariables.set('CustomId', customId)\r",
                      "\r",
                      "//Checa se as variaveis obrigatorias estao preenchidas\r",
                      "if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
                      "    throw new Error('Usuario ou senha em branco')\r",
                      "}\r",
                      "if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
                      "    throw new Error('ApplicationToken em branco')\r",
                      "}\r",
                      "pm.sendRequest({\r",
                      "    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
                      "    method: 'POST',\r",
                      "    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
                      "    body: {\r",
                      "        mode: 'urlencoded',\r",
                      "        \"urlencoded\": [\r",
                      "            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
                      "            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
                      "            { key: \"grant_type\", value: \"password\" }\r",
                      "        ]\r",
                      "    }\r",
                      "    }, (err, res) => {\r",
                      "        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
                      "    })"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "ApplicationToken",
                    "value": "{{APLICATIONTOKEN}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "{{AccessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-request-Id",
                    "value": "1",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"CustomId\": \"{{CustomId}}\",\r\n    \"amount\": 100,\r\n    \"dueDate\": \"30/12/2023\",\r\n    \"txId\": null,\r\n    \"customer\": {\r\n        \"name\": \"SANDBOX PEOPLE NAME\",\r\n        \"email\": \"sandbox.people@email.sandbox.com\",\r\n        \"cpfcnpj\": \"87397163769\",\r\n        \"address\": \"STREET 01, NUMBER 02 - HOUSE 03\",\r\n        \"neighborhood\": \"NEIGHBORHOOD\",\r\n        \"city\": \"CITY\",\r\n        \"state\": \"UF\",\r\n        \"country\": \"BRAZIL\",\r\n        \"zipcode\": \"12345678\"\r\n    },\r\n    \"recipient\": {\r\n        \"name\": \"SANDBOX PEOPLE RECEIVER\",\r\n        \"cpfcnpj\": \"87397163769\",\r\n        \"email\": \"sandbox.people.receiver@email.sandbox.com\"\r\n    },\r\n    \"additionalInformation\": [\r\n        {\r\n            \"name\": \"Nome Recebedor\",\r\n            \"value\": \"SANDBOX PEOPLE NAME\"\r\n        },\r\n        {\r\n            \"name\": \"CPF Recebedor\",\r\n            \"value\": \"***.456.789-**\"\r\n        }\r\n    ],\r\n    \"confirmationUrl\": \"https://webhook.site/495472fc-207d-45ae-8c5d-731ec32779d4\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{BASEURL}}/payment/pix",
                  "host": ["{{BASEURL}}"],
                  "path": ["payment", "pix"]
                },
                "description": "Crie uma cobrança para pagamento via PIX e retorne o código PIX, valor e QRCode.\n\n**Script Pré-Requisição:**\n\n**1-** Antes de chamar o endpoint \"/payment/pix\", é necessário obter o Token de autenticação. No retorno do Token, utilize o access_token.\n\n**Exemplo:**\n\n{\n\n\"access_token\": \"akOAKwg0gb8Lt2_yziDr8y_wAOfAWziaPa9oFLZkTclIHNKKwtj8k0_K7aNMdVUooAOgBq7LpR0T23NpQwICFSnYtqbHSJrQaaP-XFiqIfQwr4buhI4DVcskwK3KZJ2bPEfdMGeNAEMay-zMm9bDdpKzs95AlI2ymPYDL8_R0V2528l4h645arRa2DV5sXwsxNvNGQRlFKsEZKF5Zp8-dQALSrsb6DUF18TsHbOGZdY\",\n\n\"token_type\": \"bearer\",\n\n\"expires_in\": 3599\n\n}\n\nO access_token será utilizado conforme o exemplo abaixo:\n\n**Authorization**: Bearer + access_token\n\n| **Parâmetro** | **Tipo** | **Tamanho** | **Obrigatório** | **Descrição** |\n| --- | --- | --- | --- | --- |\n| customid | String | 20 | Sim | Identificador da cobrança |\n| amount | Int |  | Sim | Valor da cobrança |\n| txId | String | 25 | Não | TxId do QRCode Pix |\n| dueDate | Date |  | Sim | Data de vencimento (dd/mm/yyyy) |\n| customer.name | string | 80 | Sim | Nome do pagador |\n| customer.email | string | 100 | Sim | E-mail do pagador |\n| customer.addres | string | 100 | Sim | Endereço do pagador |\n| customer.neighborhood | string | 80 | Sim | Bairro |\n| customer.city | string | 80 | Sim | Cidade |\n| customer.state | string | 2 | Sim | UF |\n| customer.country | string | 80 | Sim | País |\n| customer.zipcode | string | 10 | Sim | CEP |\n| recipient.name | String | 80 | Não | Nome do recebedor (destino do dinheiro) |\n| recipient.CPFCNPJ | String | 14 | Não | Documento do recebedor |\n| recipient.email | String | 100 | Não | E-mail do recebedor |\n| additionalInformation | Lista | N/A | Não | Informações adicionais da transação |\n| additionalInformation.name | String | 50 | Não | Nome da informação |\n| additionalInformation.value | String | 100 | Não | Valor da informação |\n| confirmationUrl | string | 250 | Não | URL para confirmação de pagamento via POST |\n\n## Cabeçalhos de Segurança\n\n**ApplicationToken**\n\n**Authorization: (bearer + token)**\n\n**x-request-id**\n\nParâmetro opcional onde o cliente pode informar um código hash no momento do depósito.\n\nAo utilizar o parâmetro x-request-id, envie o valor em MAIÚSCULAS.\n\nO valor informado no x-request-id será criptografado utilizando o ApplicationToken como chave.\nO método de criptografia é HMAC-SHA256, passando dois parâmetros: o valor do x-request-id e o valor do ApplicationToken.\n\nVocê pode utilizar o site [https://www.devglan.com/online-tools/hmac-sha256-online](https://www.devglan.com/online-tools/hmac-sha256-online) para gerar a assinatura.\n\nEste parâmetro será utilizado para controle de callbacks em operações bem-sucedidas.\n\nEste campo suporta até 68 caracteres.\n\n## Chave PIX Aleatória\n\nNa resposta da requisição, será gerada uma chave aleatória de depósito através da propriedade qrCodeString.\n\nCom esse código, a interface do parceiro poderá realizar o depósito."
              },
              "response": [
                {
                  "name": "PaymentPix",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "ApplicationToken",
                        "value": "d39bef36-e989-4a50-8301-8adaf61352a0",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"CustomId\": \"\",\r\n    \"amount\": 100,\r\n    \"dueDate\": \"30/12/2023\",\r\n    \"customer\": {\r\n        \"name\": \"SANDBOX PEOPLE NAME\",\r\n        \"email\": \"sandbox.people@email.sandbox.com\",\r\n        \"cpfcnpj\": \"87397163769\",\r\n        \"address\": \"STREET 01, NUMBER 02 - HOUSE 03\",\r\n        \"neighborhood\": \"NEIGHBORHOOD\",\r\n        \"city\": \"CITY\",\r\n        \"state\": \"UF\",\r\n        \"country\": \"BRAZIL\",\r\n        \"zipcode\": \"12345678\"\r\n    },\r\n    \"confirmationUrl\": \"https://webhook.site/495472fc-207d-45ae-8c5d-731ec32779d4\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "http://api.skilldigital.com.br/payment/pix",
                      "protocol": "http",
                      "host": ["api", "skilldigital", "com", "br"],
                      "path": ["payment", "pix"]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Cache-Control",
                      "value": "private"
                    },
                    {
                      "key": "Content-Length",
                      "value": "33926"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "key": "Server",
                      "value": "Microsoft-IIS/10.0"
                    },
                    {
                      "key": "X-AspNet-Version",
                      "value": "4.0.30319"
                    },
                    {
                      "key": "X-Powered-By",
                      "value": "ASP.NET"
                    },
                    {
                      "key": "Date",
                      "value": "Mon, 06 Mar 2023 11:28:41 GMT"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n    \"error\": false,\n    \"returnCode\": \"00\",\n    \"returnMessage\": \"Success\",\n    \"customId\": \"1678102115334\",\n    \"txId\": \"eb844fe1d978491a9e7ac8975667baf0\",\n    \"id\": \"b285dde9-95d8-46f2-83fd-b4ef7970c86e\",\n    \"invoiceCode\": \"9W6CX4W\",\n    \"paymentUrl\": \"http://sandbox.painel.skilldigital.com.br/c/b285dde9-95d8-46f2-83fd-b4ef7970c86e\",\n    \"amount\": 100,\n    \"dueDate\": null,\n    \"qrCodeString\": \"00020126910014BR.GOV.BCB.PIX2569api-pix-h.bancobs2.com.br/spi/v2/06b3464f-d3b1-495f-af75-a27523bec00452040000530398654041.005802BR5925Skill Digital Participacoes Eir6014Belo Horizonte61083038040362070503***63047B84\",\n    \"urlQRCode\": \"https://chart.googleapis.com/chart?chs=250x250&cht=qr&chl=00020126910014BR.GOV.BCB.PIX2569api-pix-h.bancobs2.com.br/spi/v2/06b3464f-d3b1-495f-af75-a27523bec00452040000530398654041.005802BR5925Skill Digital Participacoes Eir6014Belo Horizonte61083038040362070503***63047B84\",\n    \"qrCodeBase64\": \"\",\n    \"recurrence\": false,\n    \"split\": false\n}"
                }
              ]
            },
            {
              "name": "Confirmar Pagamento PIX",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var Atual = new Date()\r",
                      "var customId = Number(Atual)\r",
                      "pm.collectionVariables.set('CustomId', customId)\r",
                      "\r",
                      "//Checa se as variaveis obrigatorias estao preenchidas\r",
                      "if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
                      "    throw new Error('Usuario ou senha em branco')\r",
                      "}\r",
                      "if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
                      "    throw new Error('ApplicationToken em branco')\r",
                      "}\r",
                      "pm.sendRequest({\r",
                      "    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
                      "    method: 'POST',\r",
                      "    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
                      "    body: {\r",
                      "        mode: 'urlencoded',\r",
                      "        \"urlencoded\": [\r",
                      "            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
                      "            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
                      "            { key: \"grant_type\", value: \"password\" }\r",
                      "        ]\r",
                      "    }\r",
                      "    }, (err, res) => {\r",
                      "        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
                      "    })"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "ApplicationToken",
                    "value": "{{APLICATIONTOKEN}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "{{AccessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\": \"a7303ba1-c265-4400-ad69-6e64e7e560b0\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{BASEURL}}/invoice/putconfirmation",
                  "host": ["{{BASEURL}}"],
                  "path": ["invoice", "putconfirmation"]
                },
                "description": "Envia a confirmação de pagamento para a URL informada na criação da cobrança, caso ela já tenha sido paga.\n\nNo ambiente Sandbox, para fins de validação, este método envia a requisição para a URL sempre que for executado, independentemente do status atual da fatura.\n\n| **Parâmetro** | **Tipo** | **Tamanho** | **Obrigatório** | **Descrição** |\n| --- | --- | --- | --- | --- |\n| id | string |  | Sim | ID da fatura retornado na criação |"
              },
              "response": [
                {
                  "name": "PutConfirmation",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [
                      {
                        "key": "ApplicationToken",
                        "value": "d39bef36-e989-4a50-8301-8adaf61352a0",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"id\": \"a7303ba1-c265-4400-ad69-6e64e7e560b0\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "http://api.skilldigital.com.br/invoice/putconfirmation",
                      "protocol": "http",
                      "host": ["api", "skilldigital", "com", "br"],
                      "path": ["invoice", "putconfirmation"]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Cache-Control",
                      "value": "private"
                    },
                    {
                      "key": "Content-Length",
                      "value": "325"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "key": "Server",
                      "value": "Microsoft-IIS/10.0"
                    },
                    {
                      "key": "X-AspNet-Version",
                      "value": "4.0.30319"
                    },
                    {
                      "key": "X-Powered-By",
                      "value": "ASP.NET"
                    },
                    {
                      "key": "Date",
                      "value": "Mon, 06 Mar 2023 21:52:28 GMT"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n    \"error\": false,\n    \"returnCode\": \"00\",\n    \"returnMessage\": \"Success\",\n    \"id\": \"a7303ba1-c265-4400-ad69-6e64e7e560b0\",\n    \"invoiceCode\": \"1673966309202\",\n    \"status\": \"Pending\",\n    \"amount\": 100,\n    \"dueDate\": \"30/12/2023\",\n    \"paymentDate\": null,\n    \"amountPaid\": 0,\n    \"paymentCurrency\": null,\n    \"cancelDate\": null\n}"
                }
              ]
            }
          ],
          "description": "Endpoint responsável por realizar operações de depósito via PIX."
        },
        {
          "name": "Saque",
          "item": [
            {
              "name": "Transferência PIX",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var Atual = new Date()\r",
                      "var customId = Number(Atual)\r",
                      "pm.collectionVariables.set('CustomId', customId)\r",
                      "\r",
                      "//Checa se as variaveis obrigatorias estao preenchidas\r",
                      "if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
                      "    throw new Error('Usuario ou senha em branco')\r",
                      "}\r",
                      "if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
                      "    throw new Error('ApplicationToken em branco')\r",
                      "}\r",
                      "pm.sendRequest({\r",
                      "    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
                      "    method: 'POST',\r",
                      "    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
                      "    body: {\r",
                      "        mode: 'urlencoded',\r",
                      "        \"urlencoded\": [\r",
                      "            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
                      "            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
                      "            { key: \"grant_type\", value: \"password\" }\r",
                      "        ]\r",
                      "    }\r",
                      "    }, (err, res) => {\r",
                      "        var signBytes = CryptoJS.HmacSHA256(res.json().access_token, pm.collectionVariables.get('CRP-TOKEN'));\r",
                      "        var signHex = CryptoJS.enc.Hex.stringify(signBytes);\r",
                      "        pm.collectionVariables.set('AssinaturaDigital', signHex);\r",
                      "        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
                      "    })"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "ApplicationToken",
                    "value": "{{APLICATIONTOKEN}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "{{AccessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-request-id",
                    "value": "1",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"digitalSignature\": \"{{AssinaturaDigital}}\",\r\n    \"customId\": \"{{CustomId}}\",\r\n    \"amount\": 1,\r\n    \"favorecido\": {\r\n        \"nome\": \"SANDBOX PEOPLE NAME\",\r\n        \"cpfcnpj\": \"12065348771\",\r\n        \"chave\": {\r\n            \"idTipoChavePIX\": 3,\r\n            \"chavePIX\": \"ysilva@pigpag.com.br\"\r\n        }\r\n    },\r\n    \"confirmationUrl\": \"https://webhook.site/d5aaad3c-d8d2-4c9d-b25a-c95250af24de\",\r\n    \"updateUrl\": \"https://webhook.site/d5aaad3c-d8d2-4c9d-b25a-c95250af24de\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{BASEURL}}/transfer/pix",
                  "host": ["{{BASEURL}}"],
                  "path": ["transfer", "pix"]
                },
                "description": "Responsável por realizar o saque via PIX.\n\n**Script Pré-Requisição:**\n\n1. Antes de chamar o endpoint \"/transfer/pix\", obtenha o Token de autenticação. No retorno, utilize o access_token.\n2. Gere a assinatura digital (HMAC-SHA256) usando o access_token e o CRP-TOKEN.\n3. Converta o resultado para hexadecimal e utilize no campo \"digitalSignature\" do corpo da requisição.\n\n**Cabeçalhos:**\n- ApplicationToken\n- Authorization (Bearer + token)\n- x-request-id (opcional, para controle de callbacks, envie em MAIÚSCULAS e criptografado com ApplicationToken)\n\n**Parâmetros principais:**\n- digitalSignature: Assinatura digital de segurança\n- amount: Valor a ser transferido\n- customId: Número da fatura para conciliação\n- favorecido: Dados do recebedor (nome, CPF/CNPJ, chave PIX)\n- confirmationUrl/updateUrl: URLs de callback\n\n**Resposta:**\n- returnCode: Código de retorno\n- returnMessage: Mensagem de sucesso ou erro\n- withdrawCode: Código identificador do saque\n- authenticationCode: Código de autenticação da transação\n- transactionId: Id da transação\n- status: Status atual da transação"
              },
              "response": [
                {
                  "name": "TransferPix",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "ApplicationToken",
                        "value": "d39bef36-e989-4a50-8301-8adaf61352a0",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"digitalSignature\": \"\",\r\n    \"amount\": 1,\r\n    \"favorecido\": {\r\n        \"nome\": \"SANDBOX PEOPLE NAME\",\r\n        \"cpfcnpj\": \"87397163769\",\r\n        \"chave\": {\r\n            \"idTipoChavePIX\": 1,\r\n            \"chavePIX\": \"87397163769\"\r\n        }\r\n    },\r\n    \"confirmationUrl\": \"https://webhook.site/495472fc-207d-45ae-8c5d-731ec32779d4\",\r\n    \"updateUrl\": \"https://webhook.site/495472fc-207d-45ae-8c5d-731ec32779d4\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "http://api.skilldigital.com.br/transfer/pix",
                      "protocol": "http",
                      "host": ["api", "skilldigital", "com", "br"],
                      "path": ["transfer", "pix"]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Cache-Control",
                      "value": "private"
                    },
                    {
                      "key": "Content-Length",
                      "value": "283"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "key": "Server",
                      "value": "Microsoft-IIS/10.0"
                    },
                    {
                      "key": "X-AspNet-Version",
                      "value": "4.0.30319"
                    },
                    {
                      "key": "X-Powered-By",
                      "value": "ASP.NET"
                    },
                    {
                      "key": "Date",
                      "value": "Mon, 06 Mar 2023 16:01:49 GMT"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n    \"error\": false,\n    \"returnCode\": \"00\",\n    \"returnMessage\": \"Success\",\n    \"withdrawCode\": \"HN6Q1GBS5X\",\n    \"authenticationCode\": \"11b86417-b007-45bd-bfeb-a97c38e13d61\",\n    \"transactionId\": \"11b86417-b007-45bd-bfeb-a97c38e13d61\",\n    \"status\": \"Received and Awaiting processing\"\n}"
                }
              ]
            },
            {
              "name": "Confirmar Saque PIX",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var Atual = new Date()\r",
                      "var customId = Number(Atual)\r",
                      "pm.collectionVariables.set('CustomId', customId)\r",
                      "\r",
                      "//Checa se as variaveis obrigatorias estao preenchidas\r",
                      "if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
                      "    throw new Error('Usuario ou senha em branco')\r",
                      "}\r",
                      "if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
                      "    throw new Error('ApplicationToken em branco')\r",
                      "}\r",
                      "pm.sendRequest({\r",
                      "    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
                      "    method: 'POST',\r",
                      "    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
                      "    body: {\r",
                      "        mode: 'urlencoded',\r",
                      "        \"urlencoded\": [\r",
                      "            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
                      "            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
                      "            { key: \"grant_type\", value: \"password\" }\r",
                      "        ]\r",
                      "    }\r",
                      "    }, (err, res) => {\r",
                      "        var signBytes = CryptoJS.HmacSHA256(res.json().access_token, pm.collectionVariables.get('CRP-TOKEN'));\r",
                      "        var signHex = CryptoJS.enc.Hex.stringify(signBytes);\r",
                      "        pm.collectionVariables.set('AssinaturaDigital', signHex);\r",
                      "        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
                      "    })"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "ApplicationToken",
                    "value": "{{APLICATIONTOKEN}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "{{AccessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "digitalSignature",
                    "value": "{{AssinaturaDigital}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"digitalSignature\": \"{{AssinaturaDigital}}\",\r\n    \"withdrawCode\": \"RUR5IXXHHV\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{BASEURL}}/transfer/putconfirmation",
                  "host": ["{{BASEURL}}"],
                  "path": ["transfer", "putconfirmation"]
                }
              },
              "response": []
            },
            {
              "name": "Inicializar Pagamento PIX",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var Atual = new Date()\r",
                      "var customId = Number(Atual)\r",
                      "pm.collectionVariables.set('CustomId', customId)\r",
                      "\r",
                      "//Checa se as variaveis obrigatorias estao preenchidas\r",
                      "if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
                      "    throw new Error('Usuario ou senha em branco')\r",
                      "}\r",
                      "if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
                      "    throw new Error('ApplicationToken em branco')\r",
                      "}\r",
                      "pm.sendRequest({\r",
                      "    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
                      "    method: 'POST',\r",
                      "    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
                      "    body: {\r",
                      "        mode: 'urlencoded',\r",
                      "        \"urlencoded\": [\r",
                      "            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
                      "            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
                      "            { key: \"grant_type\", value: \"password\" }\r",
                      "        ]\r",
                      "    }\r",
                      "    }, (err, res) => {\r",
                      "        var signBytes = CryptoJS.HmacSHA256(res.json().access_token, pm.collectionVariables.get('CRP-TOKEN'));\r",
                      "        var signHex = CryptoJS.enc.Hex.stringify(signBytes);\r",
                      "        pm.collectionVariables.set('AssinaturaDigital', signHex);\r",
                      "        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
                      "    })"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "ApplicationToken",
                    "value": "{{APLICATIONTOKEN}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "{{AccessToken}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"digitalSignature\": \"{{AssinaturaDigital}}\",\r\n  \"amount\": 1,\r\n  \"chavePIX\": \"ysilva@pigpag.com.br\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{BASEURL}}/transfer/initializepaymentpix",
                  "host": ["{{BASEURL}}"],
                  "path": ["transfer", "initializepaymentpix"]
                }
              },
              "response": [
                {
                  "name": "InitializePaymentPix",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "ApplicationToken",
                        "value": "{{APLICATIONTOKEN}}",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "{{AccessToken}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"digitalSignature\": \"{{AssinaturaDigital}}\",\r\n  \"amount\": 1,\r\n  \"chavePIX\": \"ysilva@pigpag.com.br\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{BASEURL}}/transfer/initializepaymentpix",
                      "host": ["{{BASEURL}}"],
                      "path": ["transfer", "initializepaymentpix"]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Length",
                      "value": "396"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "key": "Date",
                      "value": "Sun, 15 Oct 2023 06:12:33 GMT"
                    },
                    {
                      "key": "Server",
                      "value": "Kestrel"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n    \"error\": false,\n    \"returnCode\": \"00\",\n    \"returnMessage\": \"Success\",\n    \"chavePIX\": \"ysilva@pigpag.com.br\",\n    \"nomeCorrentista\": \"Yuri Monteiro da Silva\",\n    \"cpfCnpj\": \"12065348771\",\n    \"contaDto\": {\n        \"conta\": \"722554403\",\n        \"tipoConta\": 3,\n        \"agencia\": \"1\",\n        \"ispb\": \"18236120\"\n    },\n    \"bancoDto\": {\n        \"descricao\": \"NU PAGAMENTOS S.A. - INSTITUIÇÃO DE PAGAMENTO\",\n        \"numero\": \"18236120\",\n        \"ispb\": \"18236120\"\n    },\n    \"ticket\": \"602ca15b159e4d52a4ff7f03e12682e5\"\n}"
                }
              ]
            },
            {
              "name": "TransferPix - With Ticket",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var Atual = new Date()\r",
                      "var customId = Number(Atual)\r",
                      "pm.collectionVariables.set('CustomId', customId)\r",
                      "\r",
                      "//Checa se as variaveis obrigatorias estao preenchidas\r",
                      "if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
                      "    throw new Error('Usuario ou senha em branco')\r",
                      "}\r",
                      "if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
                      "    throw new Error('ApplicationToken em branco')\r",
                      "}\r",
                      "pm.sendRequest({\r",
                      "    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
                      "    method: 'POST',\r",
                      "    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
                      "    body: {\r",
                      "        mode: 'urlencoded',\r",
                      "        \"urlencoded\": [\r",
                      "            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
                      "            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
                      "            { key: \"grant_type\", value: \"password\" }\r",
                      "        ]\r",
                      "    }\r",
                      "    }, (err, res) => {\r",
                      "        var signBytes = CryptoJS.HmacSHA256(res.json().access_token, pm.collectionVariables.get('CRP-TOKEN'));\r",
                      "        var signHex = CryptoJS.enc.Hex.stringify(signBytes);\r",
                      "        pm.collectionVariables.set('AssinaturaDigital', signHex);\r",
                      "        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
                      "    })"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "ApplicationToken",
                    "value": "{{APLICATIONTOKEN}}",
                    "type": "text"
                  },
                  {
                    "key": "Authorization",
                    "value": "{{AccessToken}}",
                    "type": "text"
                  },
                  {
                    "key": "x-request-id",
                    "value": "1",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"digitalSignature\": \"{{AssinaturaDigital}}\",\r\n    \"customId\": \"{{CustomId}}\",\r\n    \"amount\": 1,\r\n    \"ticket\": \"602ca15b159e4d52a4ff7f03e12682e5\",\r\n    \"favorecido\": {\r\n        \"nome\": \"Yuri Monteiro da Silva\",\r\n        \"cpfcnpj\": \"12065348771\",\r\n        \"chave\": {\r\n            \"idTipoChavePIX\": 3,\r\n            \"chavePIX\": \"ysilva@pigpag.com.br\"\r\n        }\r\n    },\r\n    \"confirmationUrl\": \"https://webhook.site/aca73912-7d4a-4c18-bc8a-2124c36eb620\",\r\n    \"updateUrl\": \"https://webhook.site/aca73912-7d4a-4c18-bc8a-2124c36eb620\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{BASEURL}}/transfer/pix",
                  "host": ["{{BASEURL}}"],
                  "path": ["transfer", "pix"]
                },
                "description": "Responsável por realizar o saque via PIX.\n\n**Script Pré-Requisição:**\n\n1. Antes de chamar o endpoint \"/transfer/pix\", obtenha o Token de autenticação. No retorno, utilize o access_token.\n2. Gere a assinatura digital (HMAC-SHA256) usando o access_token e o CRP-TOKEN.\n3. Converta o resultado para hexadecimal e utilize no campo \"digitalSignature\" do corpo da requisição.\n\n**Cabeçalhos:**\n- ApplicationToken\n- Authorization (Bearer + token)\n- x-request-id (opcional, para controle de callbacks, envie em MAIÚSCULAS e criptografado com ApplicationToken)\n\n**Parâmetros principais:**\n- digitalSignature: Assinatura digital de segurança\n- amount: Valor a ser transferido\n- customId: Número da fatura para conciliação\n- favorecido: Dados do recebedor (nome, CPF/CNPJ, chave PIX)\n- confirmationUrl/updateUrl: URLs de callback\n\n**Resposta:**\n- returnCode: Código de retorno\n- returnMessage: Mensagem de sucesso ou erro\n- withdrawCode: Código identificador do saque\n- authenticationCode: Código de autenticação da transação\n- transactionId: Id da transação\n- status: Status atual da transação"
              },
              "response": [
                {
                  "name": "TransferPix - With Ticket",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "ApplicationToken",
                        "value": "{{APLICATIONTOKEN}}",
                        "type": "text"
                      },
                      {
                        "key": "Authorization",
                        "value": "{{AccessToken}}",
                        "type": "text"
                      },
                      {
                        "key": "x-request-id",
                        "value": "1",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"digitalSignature\": \"{{AssinaturaDigital}}\",\r\n    \"customId\": \"{{CustomId}}\",\r\n    \"amount\": 1,\r\n    \"ticket\": \"E3822485720231015062055883538021\",\r\n    \"favorecido\": {\r\n        \"nome\": \"ERICK PEREIRA NAGATA\",\r\n        \"cpfcnpj\": \"37119774808\",\r\n        \"chave\": {\r\n            \"idTipoChavePIX\": 1,\r\n            \"chavePIX\": \"37119774808\"\r\n        }\r\n    },\r\n    \"confirmationUrl\": \"https://webhook.site/aca73912-7d4a-4c18-bc8a-2124c36eb620\",\r\n    \"updateUrl\": \"https://webhook.site/aca73912-7d4a-4c18-bc8a-2124c36eb620\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{BASEURL}}/transfer/pix",
                      "host": ["{{BASEURL}}"],
                      "path": ["transfer", "pix"]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Length",
                      "value": "273"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "key": "Date",
                      "value": "Sun, 15 Oct 2023 06:22:22 GMT"
                    },
                    {
                      "key": "Server",
                      "value": "Kestrel"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n    \"error\": false,\n    \"returnCode\": \"00\",\n    \"returnMessage\": \"Success\",\n    \"withdrawCode\": \"43ELFXUWP1\",\n    \"customId\": \"1697350937546\",\n    \"authenticationCode\": \"df749e3f-a15c-4754-8f60-160c7e6e9d1e\",\n    \"transactionId\": \"df749e3f-a15c-4754-8f60-160c7e6e9d1e\",\n    \"status\": \"Received and Awaiting processing\"\n}"
                }
              ]
            }
          ],
          "description": "Endpoints responsáveis pela operação de saque."
        },
        {
          "name": "Webhook",
          "item": [],
          "description": "### Webhook de Depósito\n\nAo solicitar um depósito via o endpoint \"/payment/pix\", será gerado um QRCode Pix para pagamento. O status ficará como pendente até o pagamento ser realizado. Após o pagamento, o sistema enviará os dados do depósito conforme o exemplo abaixo:\n\nDepósito concluído:\n\n{\n  \"customId\": \"2545962\",\n  \"id\": \"3af0009c-88ec-4b30-a63d-eddfeb0cf369\",\n  \"paymentmethod\": \"PIX\",\n  \"installments\": \"1\",\n  \"paymentDate\": \"2022-11-04\",\n  \"total\": 200,\n  \"totalPaid\": 200,\n  \"original_currency\": \"BRL\",\n  \"payment_currency\": \"BRL\",\n  \"status\": \"Paid\",\n  \"paid_by_cripto_currency\": \"false\",\n  \"hash\": null,\n  \"address\": null\n}\n\n#### Observações Importantes\n- O parâmetro x-request-id é enviado no header do callback e pode ser usado para controle de duplicidade.\n- Recomendamos que a API que recebe o callback implemente controle para evitar ações duplicadas em caso de múltiplos envios.\n\n### Webhook de Saque\n\nPara atualizações de transações de saque, utilizamos a updateUrl.\n- Se a transação for recebida, iniciada e concluída, o callback será enviado para a confirmationUrl informada na requisição.\n- Se houver algum problema durante o processamento bancário, o callback será enviado para a updateUrl, permitindo atualizar o status para \"Rejected\" ou \"Declined\".\n- Em alguns casos, a transação pode ser concluída e, minutos depois, o banco atualizar o status para rejeitada. Nesses casos, dois callbacks são enviados: um para confirmação e outro para atualização do problema.\n\n**Exemplos de updateUrl:**\n\nInstabilidade no sistema bancário:\n{\n  \"withdrawCode\": \"3BKT9405J6\",\n  \"transactionCode\": null,\n  \"updateCode\": \"01\",\n  \"updateMessage\": \"INSTABILIDADE\"\n}\n\nTransação devolvida pelo banco:\n{\n  \"withdrawCode\": \"3BKT9405J6\",\n  \"transactionCode\": null,\n  \"updateCode\": \"02\",\n  \"updateMessage\": \"TRANSAÇÃO DEVOLVIDA\"\n}\n\nTransação rejeitada pelo banco:\n{\n  \"withdrawCode\": \"3BKT9405J6\",\n  \"transactionCode\": null,\n  \"updateCode\": \"03\",\n  \"updateMessage\": \"TRANSAÇÃO REJEITADA\"\n}\n\nNesses casos, a transação é considerada recusada e o saldo deve ser estornado ao usuário.\n\n**Exemplo de saque concluído:**\n{\n  \"error\": false,\n  \"returnCode\": \"00\",\n  \"returnMessage\": \"Success\",\n  \"withdrawCode\": \"F5RNZ9YT3I\",\n  \"authenticationCode\": \"a63c0bd8-cd86-4240-8039-927d2b1ccd58\",\n  \"transactionCode\": \"E710278662023011402595500001213P\",\n  \"transaction\": {\n    \"operationType\": \"PIX\",\n    \"transactionDate\": \"2023-01-13T23:59:54.667\",\n    \"completedDate\": \"2023-01-13T23:59:59.45\",\n    \"chargebackDate\": null,\n    \"paymentDate\": \"2023-01-13T23:59:59.45\"\n  },\n  \"recipient\": {\n    \"recipientName\": \"VANDERLENIR LOIOLA LIMA\",\n    \"recipientDocumentID\": \"01845023226\",\n    \"recipientBankAgency\": null,\n    \"recipientBankAccount\": \"-\",\n    \"recipientPIXKeyType\": \"Celular\",\n    \"recipientPIXKey\": \"+5596991526191\"\n  },\n  \"requestDate\": \"2023-01-13T23:59:54.667\",\n  \"paymentDate\": \"2023-01-13T23:59:59.45\",\n  \"chargebackDate\": null,\n  \"completionDate\": \"2023-01-13T23:59:59.45\",\n  \"status\": \"Completed\"\n}\n\n**Exemplo de saque recebido e aguardando envio ao banco:**\n{\n  \"error\": false,\n  \"returnCode\": \"00\",\n  \"returnMessage\": \"Success\",\n  \"withdrawCode\": \"F5RNZ9YT3I\",\n  \"authenticationCode\": \"a63c0bd8-cd86-4240-8039-927d2b1ccd58\",\n  \"transactionCode\": \"E710278662023011402595500001213P\",\n  \"transaction\": {\n    \"operationType\": \"PIX\",\n    \"transactionDate\": \"2023-01-13T23:59:54.667\",\n    \"completedDate\": null,\n    \"chargebackDate\": null,\n    \"paymentDate\": null\n  },\n  \"recipient\": {\n    \"recipientName\": \"VANDERLENIR LOIOLA LIMA\",\n    \"recipientDocumentID\": \"01845023226\",\n    \"recipientBankAgency\": null,\n    \"recipientBankAccount\": \"-\",\n    \"recipientPIXKeyType\": \"Celular\",\n    \"recipientPIXKey\": \"+5596991526191\"\n  },\n  \"requestDate\": \"2023-01-13T23:59:54.667\",\n  \"paymentDate\": null,\n  \"chargebackDate\": null,\n  \"completionDate\": null,\n  \"status\": \"Received and Awaiting processing\"\n}\n\n**Exemplo de saque enviado ao banco e aguardando confirmação:**\n{\n  \"error\": false,\n  \"returnCode\": \"00\",\n  \"returnMessage\": \"Success\",\n  \"withdrawCode\": \"F5RNZ9YT3I\",\n  \"authenticationCode\": \"a63c0bd8-cd86-4240-8039-927d2b1ccd58\",\n  \"transactionCode\": \"E710278662023011402595500001213P\",\n  \"transaction\": {\n    \"operationType\": \"PIX\",\n    \"transactionDate\": \"2023-01-13T23:59:54.667\",\n    \"completedDate\": null,\n    \"chargebackDate\": null,\n    \"paymentDate\": \"2023-01-13T23:59:59.45\"\n  },\n  \"recipient\": {\n    \"recipientName\": \"VANDERLENIR LOIOLA LIMA\",\n    \"recipientDocumentID\": \"01845023226\",\n    \"recipientBankAgency\": null,\n    \"recipientBankAccount\": \"-\",\n    \"recipientPIXKeyType\": \"Celular\",\n    \"recipientPIXKey\": \"+5596991526191\"\n  },\n  \"requestDate\": \"2023-01-13T23:59:54.667\",\n  \"paymentDate\": \"2023-01-13T23:59:59.45\",\n  \"chargebackDate\": null,\n  \"completionDate\": null,\n  \"status\": \"Paid and Waiting Confirmation\"\n}\n\n#### Observação\nO parâmetro x-request-id é enviado no header do callback para controle de operações bem-sucedidas."
        }
      ]
    },
    {
      "name": "Saúde da API",
      "item": [
        {
          "name": "Verificar Saúde",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{BASEURL}}/health/check",
              "host": ["{{BASEURL}}"],
              "path": ["health", "check"]
            }
          },
          "response": []
        },
        {
          "name": "Registrar Saúde",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "ApplicationToken",
                "value": "{{APLICATIONTOKEN}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{AccessToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{BASEURL}}/Health/Post?url=http%3A%2F%2Fapi.skilldigital.com.br",
              "host": ["{{BASEURL}}"],
              "path": ["Health", "Post"],
              "query": [
                {
                  "key": "url",
                  "value": "http%3A%2F%2Fapi.skilldigital.com.br"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "description": "### Monitoramento de Saúde da API\n\nEsta seção oferece endpoints para verificar a saúde e a disponibilidade da API OlimpoPay.\n\nUtilize esses endpoints para monitorar se a API está operacional, identificar possíveis instabilidades e garantir que os serviços estejam respondendo corretamente.\n\n**Principais usos:**\n- Monitoramento automatizado de disponibilidade (health check)\n- Diagnóstico rápido de falhas ou indisponibilidade\n- Integração com ferramentas de monitoramento e alertas\n\n> **Dica:** Recomendado integrar esses endpoints ao seu sistema de monitoramento para garantir alta disponibilidade e resposta rápida a incidentes."
    },
    {
      "name": "Boleto Bancário",
      "item": [
        {
          "name": "Atualizar Vencimento",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var Atual = new Date()\r",
                  "var customId = Number(Atual)\r",
                  "pm.collectionVariables.set('CustomId', customId)\r",
                  "\r",
                  "//Checa se as variaveis obrigatorias estao preenchidas\r",
                  "if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
                  "    throw new Error('Usuario ou senha em branco')\r",
                  "}\r",
                  "if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
                  "    throw new Error('ApplicationToken em branco')\r",
                  "}\r",
                  "pm.sendRequest({\r",
                  "    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
                  "    method: 'POST',\r",
                  "    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
                  "    body: {\r",
                  "        mode: 'urlencoded',\r",
                  "        \"urlencoded\": [\r",
                  "            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
                  "            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
                  "            { key: \"grant_type\", value: \"password\" }\r",
                  "        ]\r",
                  "    }\r",
                  "    }, (err, res) => {\r",
                  "        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
                  "    })"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "ApplicationToken",
                "value": "{{APLICATIONTOKEN}}",
                "type": "text"
              },
              {
                "key": "Authorization",
                "value": "{{AccessToken}}",
                "type": "text"
              },
              {
                "key": "x-request-id",
                "value": "1",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"bankSlipOurNumber\": \"1\",\r\n  \"bankSlipYourNumber\": \"2\",\r\n  \"dueDate\": \"22/05/2023\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{BASEURL}}/BankSlip/UpdateDueDate",
              "host": ["{{BASEURL}}"],
              "path": ["BankSlip", "UpdateDueDate"]
            },
            "description": "Atualiza a data de vencimento do boleto bancário (BS2). Utilize este endpoint para alterar o vencimento de um boleto já emitido, conforme necessidade do cliente."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Bitcoin",
      "item": [
        {
          "name": "Enviar",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var Atual = new Date()\r",
                  "var customId = Number(Atual)\r",
                  "pm.collectionVariables.set('CustomId', customId)\r",
                  "\r",
                  "//Checa se as variaveis obrigatorias estao preenchidas\r",
                  "if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
                  "    throw new Error('Usuario ou senha em branco')\r",
                  "}\r",
                  "if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
                  "    throw new Error('ApplicationToken em branco')\r",
                  "}\r",
                  "pm.sendRequest({\r",
                  "    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
                  "    method: 'POST',\r",
                  "    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
                  "    body: {\r",
                  "        mode: 'urlencoded',\r",
                  "        \"urlencoded\": [\r",
                  "            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
                  "            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
                  "            { key: \"grant_type\", value: \"password\" }\r",
                  "        ]\r",
                  "    }\r",
                  "    }, (err, res) => {\r",
                  "        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
                  "    })"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "ApplicationToken",
                "value": "{{APLICATIONTOKEN}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{BASEURL}}/Bitcoin/Send",
              "host": ["{{BASEURL}}"],
              "path": ["Bitcoin", "Send"]
            }
          },
          "response": []
        },
        {
          "name": "Validar Endereço",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var Atual = new Date()\r",
                  "var customId = Number(Atual)\r",
                  "pm.collectionVariables.set('CustomId', customId)\r",
                  "\r",
                  "//Checa se as variaveis obrigatorias estao preenchidas\r",
                  "if (!pm.collectionVariables.get('CLIENT-ID') || !pm.collectionVariables.get('CLIENT-SECRET')){\r",
                  "    throw new Error('Usuario ou senha em branco')\r",
                  "}\r",
                  "if (!pm.collectionVariables.get('APLICATIONTOKEN')){\r",
                  "    throw new Error('ApplicationToken em branco')\r",
                  "}\r",
                  "pm.sendRequest({\r",
                  "    url: pm.collectionVariables.get('BASEURL') + '/token',\r",
                  "    method: 'POST',\r",
                  "    header: {'content-type': 'application/x-www-form-urlencoded'},\r",
                  "    body: {\r",
                  "        mode: 'urlencoded',\r",
                  "        \"urlencoded\": [\r",
                  "            { key: \"clientid\", value: pm.collectionVariables.get('CLIENT-ID') },\r",
                  "            { key: \"clientsecret\", value: pm.collectionVariables.get('CLIENT-SECRET') },\r",
                  "            { key: \"grant_type\", value: \"password\" }\r",
                  "        ]\r",
                  "    }\r",
                  "    }, (err, res) => {\r",
                  "        pm.collectionVariables.set(\"AccessToken\", 'Bearer ' + res.json().access_token)\r",
                  "    })"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "ApplicationToken",
                "value": "{{APLICATIONTOKEN}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{BASEURL}}/Bitcoin/ValidateAddress?address=your-adress",
              "host": ["{{BASEURL}}"],
              "path": ["Bitcoin", "ValidateAddress"],
              "query": [
                {
                  "key": "address",
                  "value": "your-adress"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Cabeçalhos de Segurança",
      "item": [],
      "description": "### 1. Objetivo\n\nEste manual tem como objetivo estabelecer os Cabeçalhos de Segurança (Security Headers) que devem ser implementados por padrão em aplicações WEB.\n\nO OWASP Top 10 é uma lista das dez principais vulnerabilidades críticas em aplicações web, compilada pelo Open Web Application Security Project (OWASP). Este guia de boas práticas foca nos cabeçalhos HTTP para aumentar a segurança das aplicações, considerando os riscos identificados pelo OWASP Top 10.\n\n### 2. Escopo\n\nEste manual se aplica a todas as aplicações WEB do ambiente OlimpoPay.\n\n### 3. Diretrizes\n\nDe acordo com nosso processo de Gestão de Vulnerabilidades, utilizamos a ferramenta Tenable.io Web App Scanning, uma das principais para rastreamento de vulnerabilidades.\nAssim, utilizamos o plugin HTTP Security Header Family como base para determinar a criticidade e a necessidade de implementação dos Cabeçalhos de Segurança.\n\n### 4. Cabeçalhos de Segurança e Recomendações Obrigatórias\n\nCom base na criticidade, os seguintes cabeçalhos de segurança são obrigatórios:\n\n#### 4.1 HTTP Strict Transport Security (HSTS)\n\nEste cabeçalho, por motivos de segurança e conformidade, deve incluir o valor max-age=31536000; includeSubDomains.\nMais informações podem ser consultadas nas páginas de referência abaixo:\n[Missing HTTP Strict Transport Security Policy | Tenable®](https://www.tenable.com/plugins/was/98715)\n\n#### 4.2 Cross-Origin Resource Sharing (CORS)\n\nEste cabeçalho deve mapear todos os domínios que interagem com a requisição, caso contrário a configuração será considerada insegura.\nMais informações:\n[Insecure Cross-Origin Resource Sharing Configuration | Tenable®](https://www.tenable.com/plugins/was/98983)\n\n#### 4.3 Content Security Policy (CSP)\n\nPermite controlar os recursos que o agente do usuário pode carregar em uma página, essencial para prevenir ataques de script.\nMais informações:\n[Missing Content Security Policy | Tenable®](https://www.tenable.com/plugins/was/112554)\n\n#### 4.4 Content-Type\n\nPermite que o cliente identifique a melhor forma de renderizar os dados da aplicação.\nMais informações:\n[Missing 'Content-Type' Header | Tenable®](https://www.tenable.com/plugins/was/98648)\n\n#### 4.5 Cache-Control\n\nDefine diretivas para mecanismos de cache. É fundamental utilizar as diretivas corretas para evitar que informações sensíveis (senhas, cartões, dados pessoais) sejam armazenadas no cliente e possam ser interceptadas.\nMais informações:\n[Missing 'Cache-Control' Header | Tenable®](https://www.tenable.com/plugins/was/112553)\n\n#### 4.6 X-Content-Type-Options\n\nIndica ao servidor que os tipos MIME enviados pelo Content-Type não devem ser alterados.\nMais informações:\n[X-Content-Type-Options - HTTP | MDN](https://developer.mozilla.org/pt-BR/docs/Web/HTTP/Headers/X-Content-Type-Options)\n\n#### 4.7 X-Frame-Options\n\nIndica se o navegador pode renderizar a página em frames, iframes ou objects. Ajuda a prevenir ataques de clickjacking.\nMais informações:\n[Missing 'X-Frame-Options' Header | Tenable®](https://www.tenable.com/plugins/was/98060)\n\n#### 4.8 Divulgação de Informações via HTTP Header\n\nRecomendação para desabilitar cabeçalhos padrão que informam detalhes do servidor, pois podem ser explorados por atacantes.\nMais informações:\n[HTTP Header Information Disclosure | Tenable®](https://www.tenable.com/plugins/was/98618)\n\n#### 4.9 HTTP User-Agent\n\nO cabeçalho User-Agent pode fornecer informações úteis sobre o cliente, mas deve ser tratado com cautela. Valide e sanitize os dados e monitore logs para atividades suspeitas. Não baseie decisões de segurança apenas no User-Agent.\nMais informações:\n[User-Agent Header (tenable.com)](https://developer.tenable.com/docs/user-agent-header)\n\n### 5. Revisão\n\nEste padrão é revisado anualmente ou conforme orientação do gestor de Segurança da Informação."
    },
    {
      "name": "Token",
      "item": [
        {
          "name": "Token",
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {}
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded",
                "type": "text"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "clientid",
                  "value": "{{CLIENT-ID}}",
                  "type": "text"
                },
                {
                  "key": "clientsecret",
                  "value": "{{CLIENT-SECRET}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "password",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{BASEURL}}/token",
              "host": ["{{BASEURL}}"],
              "path": ["token"]
            },
            "description": "## Authentication\n\nIn order to have access to ALL API Methods, it is necessary to request a TOKEN that will be valid for 1h (one hour). To obtain this TOKEN, the user and password of each application created in the Digital MB Investimento panel will be used.\n\n**REQUEST :**\n\n| **Parameter** | **Description** |\n| --- | --- |\n| username | Obtained on the application registration screen on the panel |\n| password | Obtained on the application registration screen on the panel |\n| grant_type | fixed value |\n\n**RESPONSE :**\n\n| **Parameter** | **Description** |\n| --- | --- |\n| access_token | API Authentication Token |\n| token_type | Token type (Fixed: “bearer”) |\n| expires_in | token validity |\n\n**REQUEST IDENTIFICATION**\n\nAll API methods need to be identified and linked to a client application. For each application created in your panel, an “applicationtoken” is generated. This code must be sent in the header of each request, as well as the authentication token obtained as described above.\n\n| **Parameter** | **Description** |\n| --- | --- |\n| applicationtoken | Obtained on the application registration screen on the panel |"
          },
          "response": [
            {
              "name": "Token",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded",
                    "name": "Content-Type",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "clientid",
                      "value": "190626000001",
                      "type": "text"
                    },
                    {
                      "key": "clientsecret",
                      "value": "21abd94c-d2a5-48ba-b38d-4a38752e8772",
                      "type": "text"
                    },
                    {
                      "key": "grant_type",
                      "value": "password",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "https://api.skilldigital.com.br/token",
                  "protocol": "https",
                  "host": ["api", "skilldigital", "com", "br"],
                  "path": ["token"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Cache-Control",
                  "value": "no-cache"
                },
                {
                  "key": "Pragma",
                  "value": "no-cache"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json;charset=UTF-8"
                },
                {
                  "key": "Expires",
                  "value": "-1"
                },
                {
                  "key": "Server",
                  "value": "Microsoft-IIS/10.0"
                },
                {
                  "key": "X-Powered-By",
                  "value": "ASP.NET"
                },
                {
                  "key": "Date",
                  "value": "Sun, 26 Mar 2023 13:33:10 GMT"
                },
                {
                  "key": "Content-Length",
                  "value": "294"
                }
              ],
              "cookie": [],
              "body": "{\n    \"access_token\": \"EPMgRea0lIVFDOnP-Is2720XbnzsFAc8E8QZZHGMTUlZ6z122BRvZt61binC57qQarhp9JIka0xywBmn1DWlWLd1U85L0JeQDHuwmnB6GR9-NHE6-qq80V9sEBp0Ukvn1vfZiojeCeP51wb6gHT_E89DnBiqXheSzYKKiu5dvNPZyY_IFPL3u1-PyIgWb-YxZe6LO5vWtTQEpzCZ2WFUyrZaDtpb8aWdT854kUxlS4I\",\n    \"token_type\": \"bearer\",\n    \"expires_in\": 3599\n}"
            }
          ]
        }
      ],
      "description": "### Autenticação e Tokens de Acesso\n\nEsta seção disponibiliza os endpoints para obtenção do Token de Acesso (Access Token), necessário para autenticar e autorizar todas as operações na API OlimpoPay.\n\nO token é válido por 1 hora e deve ser obtido utilizando as credenciais (clientid e clientsecret) cadastradas no painel Digital MB Investimento.\n\n**Como obter o Token:**\n\n- Envie uma requisição POST para o endpoint `/token` com os seguintes parâmetros no corpo (formulário x-www-form-urlencoded):\n  - `clientid`: Obtido no cadastro do aplicativo no painel\n  - `clientsecret`: Obtido no cadastro do aplicativo no painel\n  - `grant_type`: Valor fixo: `password`\n\n**Exemplo de Requisição:**\n\n| Parâmetro      | Descrição                                      |\n| -------------- | ---------------------------------------------- |\n| clientid       | ID do aplicativo cadastrado no painel           |\n| clientsecret   | Segredo do aplicativo cadastrado no painel      |\n| grant_type     | Valor fixo: 'password'                         |\n\n**Exemplo de Resposta:**\n\n| Parâmetro      | Descrição                                      |\n| -------------- | ---------------------------------------------- |\n| access_token   | Token de autenticação da API                    |\n| token_type     | Tipo do token (sempre 'bearer')                 |\n| expires_in     | Validade do token em segundos                   |\n\n**Identificação da Requisição:**\n\nTodas as requisições à API devem conter, nos headers:\n- `applicationtoken`: Obtido no painel, identifica a aplicação cliente\n- `Authorization`: O token de acesso obtido conforme acima (Bearer Token)\n\n> **Importante:** O token deve ser renovado a cada 1 hora. Sempre mantenha suas credenciais seguras e nunca compartilhe o clientsecret publicamente."
    },
    {
      "name": "FAQ",
      "request": {
        "method": "VIEW",
        "header": [],
        "url": {
          "raw": ""
        },
        "description": "### Perguntas Frequentes (FAQ)<br>\n<br>\n| Nº | Pergunta | Resposta |<br>\n|---|---|---|<br>\n| 1 | Quais URLs devo utilizar para testes e produção? | Base URL: [https://api.skilldigital.com.br](https://api.skilldigital.com.br) |<br>\n| 2 | No PaymentPix, o campo 'amount': 504 significa 5,04 BRL? | Sim. O campo amount é do tipo inteiro e representa o valor em centavos. |<br>\n| 3 | Por que existem os campos 'total' e 'totalPaid' no callback? | total é o valor original da fatura. totalPaid é o valor efetivamente pago pelo cliente, podendo ser diferente em caso de descontos, juros ou taxas. |<br>\n| 4 | Quais os possíveis valores para o campo 'status' no callback? | Paid, Canceled, Pending, Unknown |<br>\n| 5 | Existem limites mínimo e máximo para depósitos? | Não há limites. |<br>\n| 6 | Como funciona a geração da propriedade 'digitalSignature'? | A assinatura digital é uma camada extra de segurança para transações envolvendo saldo. Ela é gerada criptografando o access_token (token de autenticação da API) usando HMAC-SHA256 e o Security Token (obtido no painel). No ambiente sandbox, utilize o token: 8E765DB0-9C1C-44D0-85AB-8FD0B2E7D7CD. Ferramenta online: [devglan.com/online-tools/hmac-sha256-online](https://www.devglan.com/online-tools/hmac-sha256-online) |<br>\n| 6.1 | Para que serve o campo 'updateUrl'? | O updateUrl recebe POSTs em caso de atualizações posteriores, com os campos: WithdrawCode, UpdateCode (01-Instabilidade, 02-Devolvida, 03-Rejeitada), UpdateMessage. |<br>\n| 6.2 | O que significa 'idTipoChavePIX'? | É o tipo da chave PIX: 1-CPF/CNPJ, 2-Telefone, 3-Email, 4-EVP. |<br>\n| 6.3 | O retorno 'returnMessage: Success' garante que o valor foi transferido? | Indica sucesso, mas o sistema bancário brasileiro é assíncrono e o banco de destino pode rejeitar a transação posteriormente. |<br>\n| 6.4 | Para que servem os campos 'withdrawCode' e 'authenticationCode'? | withdrawCode é o código único da solicitação de saque. authenticationCode é gerado pelo Banco Central. |<br>\n| 6.5 | Os campos 'cpfcnpj' e 'chavePIX' devem ser iguais aos exemplos? | Não. Informe o CPF para pessoas físicas e o CNPJ para empresas. chavePIX é a chave do recebedor. |<br>\n| 6.6 | Como simular a confirmação de saque? | Utilize {{baseurl}}/transfer/putconfirmation enviando digitalSignature e withdrawCode. |<br>\n| 7 | Onde encontro os status das transações? | Saque: 01-Instabilidade, 02-Devolvida, 03-Rejeitada. Depósito: Pending, Canceled, Paid, Overdue. |<br>\n| 8 | Quais status são finais? | Depósito: Paid. Saque: Completed, Instabilidade, Devolvida, Rejeitada. |<br>\n| 9 | O que é a tecnologia PIX? | PIX é um sistema de pagamentos instantâneos criado pelo Banco Central do Brasil, permitindo transferências 24/7, sem custo para pessoas físicas e com baixas taxas para empresas. Utiliza CPF, CNPJ, e-mail ou celular como identificador. |<br>\n"
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "BASEURL",
      "value": "https://api.olimpopay.com.br"
    },
    {
      "key": "APLICATIONTOKEN",
      "value": "APP_TOKEN"
    },
    {
      "key": "CLIENT-ID",
      "value": "CLIENT-ID"
    },
    {
      "key": "CLIENT-SECRET",
      "value": "CLIENT-SECRET"
    },
    {
      "key": "CRP-TOKEN",
      "value": "CRP-TOKEN"
    },
    {
      "key": "AccessToken",
      "value": ""
    },
    {
      "key": "CustomId",
      "value": ""
    },
    {
      "key": "AssinaturaDigital",
      "value": ""
    }
  ]
}
